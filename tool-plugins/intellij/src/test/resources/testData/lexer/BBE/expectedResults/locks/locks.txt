import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Shared counter variable among multiple workers.')
WHITE_SPACE ('\n')
int ('int')
WHITE_SPACE (' ')
identifier ('counter')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('process')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"final counter value - "')
, (',')
WHITE_SPACE (' ')
identifier ('counter')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Lock the shared variable and increment the counter.')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Lock the shared variable and increment the counter.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Lock the shared variable and increment the counter.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w3')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Lock the shared variable and increment the counter.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w4')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
lock ('lock')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Lock the shared variable and increment the counter.')
WHITE_SPACE ('\n                ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
