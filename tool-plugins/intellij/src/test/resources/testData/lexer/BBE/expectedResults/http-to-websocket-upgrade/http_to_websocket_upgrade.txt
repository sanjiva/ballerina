import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('httpService')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/world"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('httpResource')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('resp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getTextPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('resp')
. ('.')
identifier ('setPayload')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('resp')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('val')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('val')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('resp')
. ('.')
identifier ('setPayload')
( ('(')
STRING_TEMPLATE_LITERAL_START ('string `')
STRING_TEMPLATE_EXPRESSION_START ('Http POST received: {{')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('val')
EXPRESSION_END ('}}')
STRING_TEMPLATE_TEXT ('\n')
STRING_TEMPLATE_LITERAL_END ('`')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('resp')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('webSocketUpgrade')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('upgradePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/ws"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('upgradeService')
: (':')
WHITE_SPACE (' ')
identifier ('wsService')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('upgrader')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n\n')
LINE_COMMENT ('// Note: When a WebSocket upgrade path is defined in HTTP resource configuration.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// - Without service configuration for WebSocketService default values are taken for sub protocols, idle timeout etc...')
WHITE_SPACE ('\n')
LINE_COMMENT ('// - If  WebSocketServiceConfig is defined without the path, sub protocols, idle timeout etc... can be configured.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// - If path is defined in the WebSocketServiceConfig it shall be ignored.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// - This service can also be bound to a different endpoint in which case the path configuration becomes useful.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('WebSocketServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('subProtocols')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"xml, json"')
] (']')
, (',')
WHITE_SPACE ('\n    ')
identifier ('idleTimeoutInSeconds')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketService')
> ('>')
WHITE_SPACE (' ')
identifier ('wsService')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
identifier ('onOpen')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"New WebSocket connection: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('id')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('onText')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('text')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('text')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('caller')
-> ('->')
identifier ('pushText')
( ('(')
identifier ('text')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('onIdleTimeout')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Idle timeout: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('id')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
