import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a `DelimitedRecordChannel` from a given file location.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The encoding is a character representation (i.e., UTF-8 ASCCI) of the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// content in the file. The `rs` annotation defines a record seperator')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (e.g., a new line) and the `fs` annotation is a field seperator')
WHITE_SPACE ('\n')
LINE_COMMENT ('// (e.g., a comma).')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getFileRecordChannel')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('Mode')
WHITE_SPACE (' ')
identifier ('permission')
, (',')
WHITE_SPACE ('\n                              ')
string ('string')
WHITE_SPACE (' ')
identifier ('encoding')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('rs')
, (',')
WHITE_SPACE ('\n                              ')
string ('string')
WHITE_SPACE (' ')
identifier ('fs')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('io')
: (':')
identifier ('DelimitedTextRecordChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openFile')
( ('(')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('permission')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a `character channel`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// from the `byte channel` to read content as text.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('channel')
, (',')
WHITE_SPACE (' ')
identifier ('encoding')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Convert the `character channel` to a `record channel`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//to read the content as records.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('DelimitedTextRecordChannel')
WHITE_SPACE (' ')
identifier ('delimitedRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('characterChannel')
, (',')
WHITE_SPACE ('\n                                                               ')
identifier ('rs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('rs')
, (',')
WHITE_SPACE ('\n                                                               ')
identifier ('fs')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('fs')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('delimitedRecordChannel')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function processes the `.CSV` file and')
WHITE_SPACE ('\n')
LINE_COMMENT ('// writes content back as text with the `|` delimiter.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
identifier ('io')
: (':')
identifier ('DelimitedTextRecordChannel')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
, (',')
WHITE_SPACE ('\n                 ')
identifier ('io')
: (':')
identifier ('DelimitedTextRecordChannel')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Read all the records from the provided file until there are')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// no more records.')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('srcRecordChannel')
. ('.')
identifier ('hasNext')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Read the records.')
WHITE_SPACE ('\n        ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('records')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
. ('.')
identifier ('getNext')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Write the records.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
check ('check')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
. ('.')
identifier ('write')
( ('(')
identifier ('records')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Specify the location of the `.CSV` file and the text file. ')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('srcFileName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sample.csv"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('dstFileName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sampleResponse.txt"')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The record separator of the `.CSV` file is a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// new line, and the field separator is a comma (,).')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('DelimitedTextRecordChannel')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
identifier ('getFileRecordChannel')
( ('(')
identifier ('srcFileName')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('READ')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"\\r?\\n"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('","')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//The record separator of the text file')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//is a new line, and the field separator is a pipe (|).')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('DelimitedTextRecordChannel')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
identifier ('getFileRecordChannel')
( ('(')
identifier ('dstFileName')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WRITE')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"\r\n"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Start processing the CSV file from "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('srcFileName')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                   ')
QUOTED_STRING_LITERAL ('" to the text file in "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('dstFileName')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('process')
( ('(')
identifier ('srcRecordChannel')
, (',')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Processing completed. The processed file is located in "')
, (',')
WHITE_SPACE ('\n                   ')
identifier ('dstFileName')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"An error occurred while processing the records: "')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
finally ('finally')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Close the text record channel.')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('srcRecordChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('sourceCloseError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occured while closing the channel: "')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sourceCloseError')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source channel closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('dstRecordChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('destinationCloseError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occured while closing the channel: "')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('destinationCloseError')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Destination channel closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
