import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('ASSOCIATED_CONNECTION')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ASSOCIATED_CONNECTION"')
; (';')
WHITE_SPACE ('\n')
@ ('@')
identifier ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('REMOTE_BACKEND')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"wss://echo.websocket.org"')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('WebSocketServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/proxy/ws"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketService')
> ('>')
WHITE_SPACE (' ')
identifier ('SimpleProxyService')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource triggered when a new client is connected.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Since messages from server side are not read by service until `onOpen` resource exeucution finishes,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//operations which should happen before reading messages should be done in `onOpen` resource.')
WHITE_SPACE ('\n    ')
identifier ('onOpen')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('wsClientEp')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
identifier ('REMOTE_BACKEND')
, (',')
WHITE_SPACE ('\n            ')
identifier ('callbackService')
: (':')
WHITE_SPACE (' ')
identifier ('ClientService')
, (',')
WHITE_SPACE ('\n            ')
identifier ('readyOnConnect')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Associate connections before reading messages from both sides')
WHITE_SPACE ('\n        ')
identifier ('wsClientEp')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
; (';')
WHITE_SPACE ('\n        ')
identifier ('caller')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wsClientEp')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//When creating client endpoint, if `readyOnClient` flag is set to false client endpoint does not start reading frames automatically.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//So `ready` action of endpoint should be called separately when ready to accept messsages.')
WHITE_SPACE ('\n        ')
identifier ('wsClientEp')
-> ('->')
identifier ('ready')
( ('(')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error calling ready on client"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new text frame is received from a client.')
WHITE_SPACE ('\n    ')
identifier ('onText')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('text')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('clientEp')
-> ('->')
identifier ('pushText')
( ('(')
identifier ('text')
, (',')
WHITE_SPACE (' ')
identifier ('final')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when sending text message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new binary frame is received from a client.')
WHITE_SPACE ('\n    ')
identifier ('onBinary')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('data')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('clientEp')
-> ('->')
identifier ('pushBinary')
( ('(')
identifier ('data')
, (',')
WHITE_SPACE (' ')
identifier ('final')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when sending binary message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when an error occurs in the connection.')
WHITE_SPACE ('\n    ')
identifier ('onError')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('clientEp')
-> ('->')
identifier ('close')
( ('(')
DECIMAL_INTEGER_LITERAL ('1011')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Unexpected condition"')
) (')')
WHITE_SPACE ('\n        ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Unexpected error hense closing the connection"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a client connection is closed from the client side.')
WHITE_SPACE ('\n    ')
identifier ('onClose')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('clientEp')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Client service to receive frames from the remote server.')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketClientService')
> ('>')
WHITE_SPACE (' ')
identifier ('ClientService')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new text frame is received from the remote backend.')
WHITE_SPACE ('\n    ')
identifier ('onText')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('text')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketListener')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('serverEp')
-> ('->')
identifier ('pushText')
( ('(')
identifier ('text')
, (',')
WHITE_SPACE (' ')
identifier ('final')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when sending text message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new binary frame is received from the remote backend.')
WHITE_SPACE ('\n    ')
identifier ('onBinary')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('data')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketListener')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('serverEp')
-> ('->')
identifier ('pushBinary')
( ('(')
identifier ('data')
, (',')
WHITE_SPACE (' ')
identifier ('final')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when sending binary message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when an error occurs in the connection.')
WHITE_SPACE ('\n    ')
identifier ('onError')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketListener')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('serverEp')
-> ('->')
identifier ('close')
( ('(')
DECIMAL_INTEGER_LITERAL ('1011')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Unexpected condition"')
) (')')
WHITE_SPACE ('\n        ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Unexpected error hense closing the connection"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a client connection is closed by the remote backend.')
WHITE_SPACE ('\n    ')
identifier ('onClose')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketListener')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('serverEp')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE ('\n            ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                     ')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketListener')
WHITE_SPACE (' ')
identifier ('ep')
) (')')
WHITE_SPACE ('\n                                        ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('client')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
check ('check')
WHITE_SPACE (' ')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketClient')
> ('>')
identifier ('ep')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('client')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('ep')
) (')')
WHITE_SPACE ('\n                                        ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketListener')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('WebSocketListener')
WHITE_SPACE (' ')
identifier ('wsEndpoint')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
check ('check')
WHITE_SPACE (' ')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketListener')
> ('>')
identifier ('ep')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('wsEndpoint')
; (';')
WHITE_SPACE ('\n')
} ('}')
