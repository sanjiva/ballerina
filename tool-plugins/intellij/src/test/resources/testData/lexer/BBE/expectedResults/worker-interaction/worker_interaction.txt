import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Workers interact with each other by sending and receiving messages. ')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Ballerina validates every send/receive worker interaction in order to avoid deadlocks.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('k')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('2.34')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 -> w2] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" k: "')
, (',')
WHITE_SPACE (' ')
identifier ('k')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send messages to worker `w2`. This message contains a tuple value with member types of `int` and `float`.')
WHITE_SPACE ('\n        ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('k')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Receive a message from worker `w2`. This message contains a `json` type value.')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('j')
; (';')
WHITE_SPACE ('\n        ')
identifier ('j')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('jStr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j')
. ('.')
identifier ('toString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 <- w2] j: "')
, (',')
WHITE_SPACE (' ')
identifier ('jStr')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Receive a message from the worker `w1`.')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('iw')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('kw')
; (';')
WHITE_SPACE ('\n        ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
float ('float')
) (')')
WHITE_SPACE (' ')
identifier ('vW1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('vW1')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
( ('(')
identifier ('iw')
, (',')
WHITE_SPACE (' ')
identifier ('kw')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('vW1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2 <- w1] iw: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('iw')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" kw: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('kw')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send a message to worker `w1`.')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('jw')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2 -> w1] jw: "')
, (',')
WHITE_SPACE (' ')
identifier ('jw')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('jw')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
