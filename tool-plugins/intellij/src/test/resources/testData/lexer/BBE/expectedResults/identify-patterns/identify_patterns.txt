import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
int ('int')
WHITE_SPACE (' ')
identifier ('index')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a record type that represents the regulator state.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('RegulatorState')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('deviceId')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('roomNo')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('tempSet')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('userAction')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a record type that represents the user actions on the hotel key.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('RoomKeyAction')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('roomNo')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('userAction')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n\n')
identifier ('RoomKeyAction')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('roomActions')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n\n')
stream ('stream')
< ('<')
identifier ('RegulatorState')
> ('>')
WHITE_SPACE (' ')
identifier ('regulatorStateChangeStream')
; (';')
WHITE_SPACE ('\n')
stream ('stream')
< ('<')
identifier ('RoomKeyAction')
> ('>')
WHITE_SPACE (' ')
identifier ('roomKeyStream')
; (';')
WHITE_SPACE ('\n')
stream ('stream')
< ('<')
identifier ('RoomKeyAction')
> ('>')
WHITE_SPACE (' ')
identifier ('regulatorActionStream')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Deploy the decision rules for the regulator's next action based on the current regulator state and the user action on')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the hotel key. If the regulator was on before and is still on after the user has removed the hotel key from the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// room, the `stop` control action is called.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('deployRegulatorActionDecisionRules')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
forever ('forever')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
from ('from')
WHITE_SPACE (' ')
every ('every')
WHITE_SPACE (' ')
identifier ('regulatorStateChangeStream')
WHITE_SPACE ('\n            ')
where ('where')
WHITE_SPACE (' ')
identifier ('userAction')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"on"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('e1')
WHITE_SPACE ('\n        ')
followed ('followed')
WHITE_SPACE (' ')
by ('by')
WHITE_SPACE (' ')
identifier ('roomKeyStream')
WHITE_SPACE ('\n            ')
where ('where')
WHITE_SPACE (' ')
identifier ('e1')
. ('.')
identifier ('roomNo')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('roomNo')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('userAction')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"removed"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('e2')
WHITE_SPACE ('\n        ')
|| ('||')
WHITE_SPACE (' ')
identifier ('regulatorStateChangeStream')
WHITE_SPACE ('\n            ')
where ('where')
WHITE_SPACE (' ')
identifier ('e1')
. ('.')
identifier ('roomNo')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('roomNo')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('userAction')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"off"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('e3')
WHITE_SPACE ('\n        ')
select ('select')
WHITE_SPACE (' ')
identifier ('e1')
. ('.')
identifier ('roomNo')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('roomNo')
, (',')
WHITE_SPACE ('\n            ')
identifier ('e2')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
WHITE_SPACE (' ')
? ('?')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"none"')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"stop"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('userAction')
WHITE_SPACE ('\n        ')
having ('having')
WHITE_SPACE (' ')
identifier ('userAction')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"none"')
WHITE_SPACE ('\n        ')
=> ('=>')
WHITE_SPACE (' ')
( ('(')
identifier ('RoomKeyAction')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('keyAction')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('regulatorActionStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('keyAction')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('index')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Deploys the streaming pattern rules that define how the regulator is controlled based on received events.')
WHITE_SPACE ('\n    ')
identifier ('deployRegulatorActionDecisionRules')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Sample events that represent the different regulator states.')
WHITE_SPACE ('\n    ')
identifier ('RegulatorState')
WHITE_SPACE (' ')
identifier ('regulatorState1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('deviceId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('roomNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE ('\n        ')
identifier ('tempSet')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('23.56')
, (',')
WHITE_SPACE (' ')
identifier ('userAction')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"on"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('RegulatorState')
WHITE_SPACE (' ')
identifier ('regulatorState2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('deviceId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('roomNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE ('\n        ')
identifier ('tempSet')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('23.56')
, (',')
WHITE_SPACE (' ')
identifier ('userAction')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"off"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A sample event that represents the user action on the door of the room. 'removed' indicates that the owner has left the room.')
WHITE_SPACE ('\n    ')
identifier ('RoomKeyAction')
WHITE_SPACE (' ')
identifier ('roomKeyAction')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('roomNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('userAction')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"removed"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `RegulatorActionStream` subscribes to the `alertRoomAction` function. Whenever the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// 'RegulatorActionStream' stream receives a valid event, this function is called.')
WHITE_SPACE ('\n    ')
identifier ('regulatorActionStream')
. ('.')
identifier ('subscribe')
( ('(')
identifier ('alertRoomAction')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Publish/simulate the sample event that represents the regulator `switch on` event.')
WHITE_SPACE ('\n    ')
identifier ('regulatorStateChangeStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('regulatorState1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('200')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Simulate the sample event that represents the door/room closed event.')
WHITE_SPACE ('\n    ')
identifier ('roomKeyStream')
. ('.')
identifier ('publish')
( ('(')
identifier ('roomKeyAction')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('500')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('500')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('count')
++ ('++')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('roomActions')
) (')')
WHITE_SPACE (' ')
> ('>')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
break ('break')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('alertRoomAction')
( ('(')
identifier ('RoomKeyAction')
WHITE_SPACE (' ')
identifier ('action')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"alertRoomAction function invoked for Room : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
identifier ('action')
. ('.')
identifier ('roomNo')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" and the action : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
identifier ('action')
. ('.')
identifier ('userAction')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('addToGlobalRoomActions')
( ('(')
identifier ('action')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('addToGlobalRoomActions')
( ('(')
identifier ('RoomKeyAction')
WHITE_SPACE (' ')
identifier ('roomAction')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('roomActions')
[ ('[')
identifier ('index')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('roomAction')
; (';')
WHITE_SPACE ('\n    ')
identifier ('index')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('index')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n')
} ('}')
