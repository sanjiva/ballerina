import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function takes one required parameter, one defaultable parameter and')
WHITE_SPACE ('\n')
LINE_COMMENT ('// one rest parameter of type string. A function can have only one rest parameter.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The rest parameter can take any number of values, and is equivalent to an array of the same type. ')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printFruits')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('separator')
, (',')
WHITE_SPACE ('\n                     ')
string ('string')
WHITE_SPACE (' ')
identifier ('title')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Fruits: "')
, (',')
WHITE_SPACE ('\n                     ')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('concatStrings')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('finalStr')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('index')
, (',')
WHITE_SPACE (' ')
identifier ('str')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('concatStrings')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('index')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('finalStr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('str')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('finalStr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalStr')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('separator')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('str')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('title')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('finalStr')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Call the function by passing only the required parameter.')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the function by passing the required parameter, and ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// one value for the rest parameter.')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Apples"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the function by passing the required parameter, defaultable ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameter, and one value for the rest parameter.')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
, (',')
WHITE_SPACE (' ')
identifier ('title')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Available Fruits: "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Apples"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the function by passing a separator, and multiple values for the rest')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameter.')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Apples"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Oranges"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
, (',')
WHITE_SPACE (' ')
identifier ('title')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Available Fruits: "')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Apples"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Oranges"')
, (',')
WHITE_SPACE ('\n                ')
QUOTED_STRING_LITERAL ('"Grapes"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The placement of defaultable parameters can be mixed with rest ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameters ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// when invoking the function.')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Apples"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Oranges"')
, (',')
WHITE_SPACE (' ')
identifier ('title')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Available Fruits: "')
, (',')
WHITE_SPACE ('\n                ')
QUOTED_STRING_LITERAL ('"Grapes"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Pass an array as the rest parameter instaed of calling the ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// function by passing each value separately. ')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"Apples"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Oranges"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Grapes"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printFruits')
( ('(')
QUOTED_STRING_LITERAL ('","')
, (',')
WHITE_SPACE (' ')
identifier ('title')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Available Fruits: "')
, (',')
WHITE_SPACE (' ')
... ('...')
identifier ('fruits')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
