import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Defines an object called 'Person'. It contains public, private and protected fields along with their types. Optionally, for fields, the default value can be defined. If not, the default value for that type will automatically get set.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
public ('public')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
, (',')
WHITE_SPACE ('\n    ')
public ('public')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If you need to have a field with own type, you need to make that field defaultable. Here we have made 'parent' field defaultable by making it nullable.')
WHITE_SPACE ('\n    ')
public ('public')
WHITE_SPACE (' ')
identifier ('Person')
? ('?')
WHITE_SPACE (' ')
identifier ('parent')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Private fields are only visible within the object and its functions.')
WHITE_SPACE ('\n    ')
private ('private')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('email')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"default@abc.com"')
, (',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Protected fields (i.e., no access modifiers) are visible only within the same package.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"No 20, Palm grove"')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// There are three ways to initialize this object.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This initialization is useful when you need to initialize a different type on the right side.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('Person')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
