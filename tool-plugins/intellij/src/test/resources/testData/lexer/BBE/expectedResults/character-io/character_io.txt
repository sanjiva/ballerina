import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n\n')
LINE_COMMENT ('// This function returns a CharacterChannel from a given file location,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// according to the permissions and encoding that you specify.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getFileCharacterChannel')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('Mode')
WHITE_SPACE (' ')
identifier ('permission')
, (',')
WHITE_SPACE ('\n                                 ')
string ('string')
WHITE_SPACE (' ')
identifier ('encoding')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// First, get the ByteChannel representation of the file.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openFile')
( ('(')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('permission')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Then, create an instance of the CharacterChannel from the ByteChannel')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// to read content as text.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('charChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('channel')
, (',')
WHITE_SPACE (' ')
identifier ('encoding')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('charChannel')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function reads characters from 'channel',')
WHITE_SPACE ('\n')
LINE_COMMENT ('//which is an instance of CharacterChannel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('readCharacters')
( ('(')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('channel')
, (',')
WHITE_SPACE ('\n                        ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfChars')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//This is how the characters are read.')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('channel')
. ('.')
identifier ('read')
( ('(')
identifier ('numberOfChars')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('characters')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('characters')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function wrties characters to 'channel'')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('writeCharacters')
( ('(')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('channel')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('content')
, (',')
WHITE_SPACE ('\n                         ')
int ('int')
WHITE_SPACE (' ')
identifier ('startOffset')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//This is how the characters are written.')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('channel')
. ('.')
identifier ('write')
( ('(')
identifier ('content')
, (',')
WHITE_SPACE (' ')
identifier ('startOffset')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfCharsWritten')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('" No of characters written : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('numberOfCharsWritten')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function reads content from a file,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// appends the additional string, and writes the content.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('process')
( ('(')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('sourceChannel')
, (',')
WHITE_SPACE ('\n                 ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('destinationChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here is the string that is appended in-between.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('intermediateCharacterString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" my name is "')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The first five characters in the source file contain the greeting.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('greetingText')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('readCharacters')
( ('(')
identifier ('sourceChannel')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is a request for the next set of characters in the file.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('readCharacters')
( ('(')
identifier ('sourceChannel')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('15')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here is how the greeting is written to the destination file.')
WHITE_SPACE ('\n        ')
identifier ('writeCharacters')
( ('(')
identifier ('destinationChannel')
, (',')
WHITE_SPACE (' ')
identifier ('greetingText')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here is how the intermediate string is appended to the file.')
WHITE_SPACE ('\n        ')
identifier ('writeCharacters')
( ('(')
identifier ('destinationChannel')
, (',')
WHITE_SPACE (' ')
identifier ('intermediateCharacterString')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here is how the remaining characters are written to the file,')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// leaving an offset.')
WHITE_SPACE ('\n        ')
identifier ('writeCharacters')
( ('(')
identifier ('destinationChannel')
, (',')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('sourceChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getFileCharacterChannel')
( ('(')
QUOTED_STRING_LITERAL ('"./files/sample.txt"')
, (',')
WHITE_SPACE ('\n                                                ')
identifier ('io')
: (':')
identifier ('READ')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('destinationChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getFileCharacterChannel')
( ('(')
QUOTED_STRING_LITERAL ('"./files/sampleResponse.txt"')
, (',')
WHITE_SPACE ('\n                                                     ')
identifier ('io')
: (':')
identifier ('WRITE')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Started to process the file."')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('process')
( ('(')
identifier ('sourceChannel')
, (',')
WHITE_SPACE (' ')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"File processing complete."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred while processing chars "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
finally ('finally')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Close the created connections.')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('sourceChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('sourceCloseError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occured while closing the channel: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                            ')
identifier ('sourceCloseError')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source channel closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('destinationChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('destinationCloseError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occured while closing the channel: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                            ')
identifier ('destinationCloseError')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Destination channel closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
