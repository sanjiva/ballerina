import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a ByteChannel from a given file location')
WHITE_SPACE ('\n')
LINE_COMMENT ('// according to the specified file permission (i.e., whether the file')
WHITE_SPACE ('\n')
LINE_COMMENT ('// should be opened for read or write).')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getFileChannel')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('io')
: (':')
identifier ('Mode')
WHITE_SPACE (' ')
identifier ('permission')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here is how the ByteChannel is retrieved from the file.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openFile')
( ('(')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('permission')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('channel')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Reads a specified number of bytes from the given channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('readBytes')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
, (',')
WHITE_SPACE ('\n                   ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfBytes')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here is how the bytes are read from the channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('channel')
. ('.')
identifier ('read')
( ('(')
identifier ('numberOfBytes')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
( ('(')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
identifier ('content')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('content')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('readError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('readError')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Writes byte content with the given offset to a channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('writeBytes')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
, (',')
WHITE_SPACE ('\n                    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('content')
, (',')
WHITE_SPACE ('\n                    ')
int ('int')
WHITE_SPACE (' ')
identifier ('startOffset')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here is how the bytes are written to the channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('channel')
. ('.')
identifier ('write')
( ('(')
identifier ('content')
, (',')
WHITE_SPACE (' ')
identifier ('startOffset')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfBytesWritten')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('numberOfBytesWritten')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Copies content from the source channel to a destination channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('copy')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('src')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('dst')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Specifies the number of bytes that should be read from a single')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// read operation.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('bytesChunk')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfBytesWritten')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('readCount')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('offset')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('readContent')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('doneCopying')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here is how to read all the content from')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// the source and copy it to the destination.')
WHITE_SPACE ('\n        ')
while ('while')
WHITE_SPACE (' ')
( ('(')
! ('!')
identifier ('doneCopying')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('readContent')
, (',')
WHITE_SPACE (' ')
identifier ('readCount')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('readBytes')
( ('(')
identifier ('src')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('readCount')
WHITE_SPACE (' ')
<= ('<=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//If no content is read, the loop is ended.')
WHITE_SPACE ('\n                ')
identifier ('doneCopying')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('numberOfBytesWritten')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('writeBytes')
( ('(')
identifier ('dst')
, (',')
WHITE_SPACE (' ')
identifier ('readContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('srcFilePath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/ballerina.jpg"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('dstFilePath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/ballerinaCopy.jpg"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('sourceChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getFileChannel')
( ('(')
identifier ('srcFilePath')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('READ')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('destinationChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getFileChannel')
( ('(')
identifier ('dstFilePath')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WRITE')
) (')')
; (';')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Start to copy files from "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('srcFilePath')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" to "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
identifier ('dstFilePath')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('copy')
( ('(')
identifier ('sourceChannel')
, (',')
WHITE_SPACE (' ')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"File copy completed. The copied file could be located in "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
identifier ('dstFilePath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred while performing copy "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
finally ('finally')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Close the created connections.')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('sourceChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('sourceCloseError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occured while closing the channel: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                           ')
identifier ('sourceCloseError')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source channel closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('destinationChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('destinationCloseError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occured while closing the channel: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                           ')
identifier ('destinationCloseError')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Destination channel closed successfully."')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
