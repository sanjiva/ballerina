import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// In Ballerina, each function consists of one or more workers, which are independent ')
WHITE_SPACE ('\n')
LINE_COMMENT ('// parallel execution code blocks. If explicit workers are not mentioned with worker blocks,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the function code will belong to a single implicit default worker.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Calculate sum(n)')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000000')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('sum')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"sum of first "')
, (',')
WHITE_SPACE (' ')
identifier ('n')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" positive numbers = "')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Calculate sum(n^2)')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000000')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('sum')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"sum of squares of first "')
, (',')
WHITE_SPACE (' ')
identifier ('n')
, (',')
WHITE_SPACE (' \n                   ')
QUOTED_STRING_LITERAL ('" positive numbers = "')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
