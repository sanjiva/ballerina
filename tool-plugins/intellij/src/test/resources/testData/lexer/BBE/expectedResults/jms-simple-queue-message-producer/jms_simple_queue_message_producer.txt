import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('jms')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This creates a queue sender.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('SimpleQueueSender')
WHITE_SPACE (' ')
identifier ('queueSender')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('initialContextFactory')
: (':')
QUOTED_STRING_LITERAL ('"bmbInitialContextFactory"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('providerUrl')
: (':')
QUOTED_STRING_LITERAL ('"amqp://admin:admin@carbon/carbon?"')
WHITE_SPACE ('\n                ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"brokerlist='tcp://localhost:5672'"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('acknowledgementMode')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AUTO_ACKNOWLEDGE"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('queueName')
: (':')
QUOTED_STRING_LITERAL ('"MyQueue"')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates a text message.')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
( ('(')
identifier ('queueSender')
. ('.')
identifier ('createTextMessage')
( ('(')
QUOTED_STRING_LITERAL ('"Hello from Ballerina"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while creating message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
identifier ('jms')
: (':')
identifier ('Message')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This sends the Ballerina message to the JMS provider.')
WHITE_SPACE ('\n            ')
identifier ('queueSender')
-> ('->')
identifier ('send')
( ('(')
identifier ('msg')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while sending"')
WHITE_SPACE ('\n                                          ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n            ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
