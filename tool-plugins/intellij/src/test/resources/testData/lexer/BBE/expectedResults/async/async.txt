import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
; (';')
WHITE_SPACE ('\n\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' \n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"https://postman-echo.com"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Asynchronously call the function named `sum()`.')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
DECIMAL_INTEGER_LITERAL ('40')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('50')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can pass around the value of the `future` variable')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and call its results later.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('square_plus_cube')
( ('(')
identifier ('f1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"SQ + CB = "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the `countInfinity()` function, which runs forever in asynchronous mode.')
WHITE_SPACE ('\n    ')
future ('future')
WHITE_SPACE (' ')
identifier ('f2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('countInfinity')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Check whether the function call is done.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Check whether someone cancelled the asynchronous execution.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isCancelled')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Cancel the asynchronous operation.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('cancelled')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('f2')
. ('.')
identifier ('cancel')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('cancelled')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Counting done in one second: "')
, (',')
WHITE_SPACE (' ')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isCancelled')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// async action call')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
identifier ('error')
> ('>')
WHITE_SPACE (' ')
identifier ('f3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('clientEndpoint')
-> ('->')
identifier ('get')
( ('(')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"/get?test=123"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('sum')
( ('(')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f3')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
await ('await')
WHITE_SPACE (' ')
identifier ('f3')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('resp')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('resp')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f3')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('square')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('n')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('cube')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('n')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('square_plus_cube')
( ('(')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
await ('await')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sq')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('square')
( ('(')
identifier ('n')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('sq')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
await ('await')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('cb')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cube')
( ('(')
identifier ('n')
) (')')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sq')
; (';')
WHITE_SPACE ('\n        ')
identifier ('sq')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('sq')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('cb')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('countInfinity')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('count')
++ ('++')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
