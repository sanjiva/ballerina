import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a value of the `any` type.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getValue')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
any ('any')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cat"')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In this example, the variable named `a` of the `any` type holds an `int` value.')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('a')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// First, the variable of the `any` type needs to be cast to the required type (`int` in this example) as shown here.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('intVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('a')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('intVal')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// In Ballerina, a variable of the `any` type can hold values of any data type.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('ia')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
] (']')
; (';')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('ar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ia')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('ar')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('getValue')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
