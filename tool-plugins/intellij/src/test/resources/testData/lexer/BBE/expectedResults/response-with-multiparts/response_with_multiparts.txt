import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('file')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creating an endpoint for the client.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://localhost:9092"')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Creating a listener for the service.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('multipartEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/multiparts"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('multipartResponseEncoder')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9092')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/encode_out_response"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('multipartSender')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Create an enclosing entity to hold child parts.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('parentPart')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Create a child part with json content.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('childPart1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('childPart1')
. ('.')
identifier ('setJson')
( ('(')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"wso2"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Create another child part with a file.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('childPart2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This file path is relative to where the ballerina is running.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//If your file is located outside, please give the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//absolute file path instead.')
WHITE_SPACE ('\n        ')
identifier ('childPart2')
. ('.')
identifier ('setFileAsEntityBody')
( ('(')
QUOTED_STRING_LITERAL ('"./files/test.xml"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('TEXT_XML')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Create an array to hold child parts.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('childParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('childPart1')
, (',')
WHITE_SPACE (' ')
identifier ('childPart2')
] (']')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Set the child parts to the parent part.')
WHITE_SPACE ('\n        ')
identifier ('parentPart')
. ('.')
identifier ('setBodyParts')
( ('(')
identifier ('childParts')
, (',')
WHITE_SPACE ('\n            ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MULTIPART_MIXED')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Create an array to hold the parent part and set it to response.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('immediatePartsToResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('parentPart')
] (']')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('outResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('outResponse')
. ('.')
identifier ('setBodyParts')
( ('(')
identifier ('immediatePartsToResponse')
, (',')
WHITE_SPACE ('\n            ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MULTIPART_FORM_DATA')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('outResponse')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Binding the listener to the service.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/multiparts"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('multipartResponseDecoder')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
identifier ('multipartEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/decode_in_response"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This resource accepts multipart responses.')
WHITE_SPACE ('\n    ')
identifier ('multipartReceiver')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('inResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extract the bodyparts from the response.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('returnResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/multiparts/encode_out_response"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('returnResult')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Setting the error response in-case of an error')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('connectionErr')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Connection error"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('returnResponse')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
match ('match')
WHITE_SPACE (' ')
identifier ('returnResponse')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                    ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('parentParts')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
LINE_COMMENT ('//Loop through body parts.')
WHITE_SPACE ('\n                        ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('parentPart')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('parentParts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                            ')
identifier ('handleNestedParts')
( ('(')
identifier ('parentPart')
) (')')
; (';')
WHITE_SPACE ('\n                        ')
} ('}')
WHITE_SPACE ('\n                        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Body Parts Received!"')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding "')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Get the child parts that are nested within a parent.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleNestedParts')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('parentPart')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('contentTypeOfParent')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('parentPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('contentTypeOfParent')
. ('.')
identifier ('hasPrefix')
( ('(')
QUOTED_STRING_LITERAL ('"multipart/"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('parentPart')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error retrieving child parts! "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('childParts')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Nested Parts Detected!"')
) (')')
; (';')
WHITE_SPACE ('\n                ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('childPart')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('childParts')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('handleContent')
( ('(')
identifier ('childPart')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The content logic that handles the body parts')
WHITE_SPACE ('\n')
LINE_COMMENT ('//vary based on your requirement.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleContent')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('bodyPart')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('mime')
: (':')
identifier ('MediaType')
WHITE_SPACE (' ')
identifier ('mediaType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE ('\n                        ')
identifier ('mime')
: (':')
identifier ('getMediaType')
( ('(')
identifier ('bodyPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mediaType')
. ('.')
identifier ('getBaseType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('TEXT_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extract xml data from body part and print.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getXml')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in getting xml payload :"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('xmlContent')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
< ('<')
string ('string')
> ('>')
identifier ('xmlContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extract json data from body part and print.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getJson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in getting json payload :"')
WHITE_SPACE ('\n                        ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonContent')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('jsonContent')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extract text data from body part and print.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getText')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in getting string payload :"')
WHITE_SPACE ('\n                        ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('textContent')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('textContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_PDF')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getByteChannel')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in getting byte channel :"')
WHITE_SPACE ('\n                    ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('destinationChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
identifier ('getFileChannel')
( ('(')
QUOTED_STRING_LITERAL ('"ReceivedFile.pdf"')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WRITE')
) (')')
; (';')
WHITE_SPACE ('\n                ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('copy')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
identifier ('destinationChannel')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"File Received"')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error occurred while saving file : "')
WHITE_SPACE ('\n                            ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
finally ('finally')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('// Close the created connections.')
WHITE_SPACE ('\n                    ')
identifier ('byteChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error closing byteChannel "')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('destinationChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n                            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error closing destinationChannel"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n                    ')
} ('}')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a ByteChannel from a given file location according')
WHITE_SPACE ('\n')
LINE_COMMENT ('// to the specified file permission')
WHITE_SPACE ('\n')
LINE_COMMENT ('//(i.e., whether the file should be opened for read or write)."}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getFileChannel')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('Mode')
WHITE_SPACE (' ')
identifier ('permission')
) (')')
WHITE_SPACE ('\n    ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here is how the ByteChannel is retrieved from the file.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openFile')
( ('(')
identifier ('filePath')
, (',')
WHITE_SPACE (' ')
identifier ('permission')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('channel')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function reads a specified number of bytes from the given channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('readBytes')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfBytes')
) (')')
WHITE_SPACE ('\n    ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here is how the bytes are read from the channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('channel')
. ('.')
identifier ('read')
( ('(')
identifier ('numberOfBytes')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
( ('(')
byte ('byte')
[ ('[')
] (']')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
identifier ('content')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('content')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('readError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('readError')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function writes a byte content with the given offset to a channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('writeBytes')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('channel')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('content')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('startOffset')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE ('\n    ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here is how the bytes are written to the channel.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('channel')
. ('.')
identifier ('write')
( ('(')
identifier ('content')
, (',')
WHITE_SPACE (' ')
identifier ('startOffset')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfBytesWritten')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('numberOfBytesWritten')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function copies content from the source channel to a')
WHITE_SPACE ('\n')
LINE_COMMENT ('//destination channel.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('copy')
( ('(')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('src')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('dst')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Specifies the number of bytes that should be read from a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//single read operation.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('bytesChunk')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10000')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('numberOfBytesWritten')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('readCount')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('offset')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('readContent')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('doneCopying')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here is how to read all the content from')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// the source and copy it to the destination.')
WHITE_SPACE ('\n        ')
while ('while')
WHITE_SPACE (' ')
( ('(')
! ('!')
identifier ('doneCopying')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('readContent')
, (',')
WHITE_SPACE (' ')
identifier ('readCount')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('readBytes')
( ('(')
identifier ('src')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('readCount')
WHITE_SPACE (' ')
<= ('<=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//If no content is read, the loop is ended.')
WHITE_SPACE ('\n                ')
identifier ('doneCopying')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('numberOfBytesWritten')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('writeBytes')
( ('(')
identifier ('dst')
, (',')
WHITE_SPACE (' ')
identifier ('readContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
