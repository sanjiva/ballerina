import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `BasePath` attribute associates a path to the service.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// It binds the service endpoint to the service.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/foo"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('echo')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `POST` annotation restricts the resource to accept `POST` requests only. Similarly, there are different annotations for each HTTP verb.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `Path` attribute associates a subpath to the resource.')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/bar"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('echo')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This method gets the request payload.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// Perform validation of JSON data before setting it to the response to prevent security vulnerabilities.')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('value')
. ('.')
identifier ('hello')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('value')
. ('.')
identifier ('hello')
. ('.')
identifier ('toString')
( ('(')
) (')')
. ('.')
identifier ('matches')
( ('(')
QUOTED_STRING_LITERAL ('"[a-zA-Z]+"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('// Since JSON data is known to be valid, `untaint` the data denoting that the data is trusted and set the JSON to response.')
WHITE_SPACE ('\n                    ')
identifier ('res')
. ('.')
identifier ('setJsonPayload')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('400')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"JSON containted invalid data"')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Reply to the client with the response.')
WHITE_SPACE ('\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
