import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('line01')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('line02')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('state')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('zipcode')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// According to this, `addr` and `guardian` fields may or may not contain a value.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('address')
? ('?')
WHITE_SPACE (' ')
identifier ('addr')
; (';')
WHITE_SPACE ('\n    ')
identifier ('person')
? ('?')
WHITE_SPACE (' ')
identifier ('guardian')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function optionally returns a person value.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('person')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('name')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('person')
WHITE_SPACE (' ')
identifier ('p')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('name')
: (':')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('addr')
: (':')
WHITE_SPACE ('\n                            ')
{ ('{')
identifier ('line01')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"61 brandon stree"')
, (',')
WHITE_SPACE (' ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Santa Clara"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('state')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"CA"')
, (',')
WHITE_SPACE (' ')
identifier ('zipcode')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"95134"')
} ('}')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('p')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('person')
? ('?')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
QUOTED_STRING_LITERAL ('"John"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The field access operator is a lifted operator in Ballerina. As shown here,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the type of both `p1` and `p1.addr` are optional types.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value "Santa Clara" is displayed in the console.')
WHITE_SPACE ('\n    ')
string ('string')
? ('?')
WHITE_SPACE (' ')
identifier ('city1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p1')
. ('.')
identifier ('addr')
. ('.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// According to this, the `city2` variable will not contain a value.')
WHITE_SPACE ('\n    ')
identifier ('person')
? ('?')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('getPerson')
( ('(')
QUOTED_STRING_LITERAL ('""')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
? ('?')
WHITE_SPACE (' ')
identifier ('city2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p2')
. ('.')
identifier ('addr')
. ('.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here, the Elvis operator is used to eliminate `nil`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the value of the first expression is not `nil`, the Elvis operator returns that value.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the value of the first expression is `nil`, the operator returns the value of the second expression.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('defaultCity')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"San Jose"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('city2')
WHITE_SPACE (' ')
ELVIS ('?:')
WHITE_SPACE (' ')
identifier ('defaultCity')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
