import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is a Ballerina record definition.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('fname')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('lname')
, (',')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Movie')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('title')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('year')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('released')
, (',')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('writer')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('Movie')
WHITE_SPACE (' ')
identifier ('theRevenant')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('title')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"The Revenant"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('year')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"2015"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('released')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"08 Jan 2016"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('writer')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('fname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Michael"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('lname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Punke"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here's how you can convert a record to a JSON object.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This conversion is unsafe because it may not be possible to convert some data types')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// that are defined in the record to JSON.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('theRevenant')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('j')
. ('.')
identifier ('writer')
. ('.')
identifier ('lname')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Similarly, you can convert a record to a map.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This conversion is safe.')
WHITE_SPACE ('\n    ')
map ('map')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
map ('map')
> ('>')
identifier ('theRevenant')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('writer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
identifier ('Person')
> ('>')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"writer"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('writer')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here's how you can convert a JSON object to a record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This conversion is unsafe because the field names and types are unknown until runtime.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('inceptionJ')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('title')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Inception"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('year')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"2010"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('released')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"16 Jul 2010"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('writer')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('fname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Christopher"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('lname')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Nolan"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Movie')
WHITE_SPACE (' ')
identifier ('inception')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
identifier ('Movie')
> ('>')
identifier ('inceptionJ')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('inceptionJ')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
