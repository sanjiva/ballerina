import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The implicit initial value of a map is the empty map.')
WHITE_SPACE ('\n    ')
map ('map')
WHITE_SPACE (' ')
identifier ('m')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can also declare and initialize a map with a map literal.')
WHITE_SPACE ('\n    ')
map ('map')
WHITE_SPACE (' ')
identifier ('addrMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('line1')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"No. 20"')
, (',')
WHITE_SPACE (' ')
identifier ('line2')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Palm Grove"')
, (',')
WHITE_SPACE (' ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo 03"')
, (',')
WHITE_SPACE (' ')
identifier ('country')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This retrieves a value of a key using an index operator.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('country')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('addrMap')
[ ('[')
QUOTED_STRING_LITERAL ('"country"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('country')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This retrieves a value of a key from the map using the dot (.) operator.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('addrMap')
. ('.')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('city')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This adds or updates the value of a key.')
WHITE_SPACE ('\n    ')
identifier ('addrMap')
[ ('[')
QUOTED_STRING_LITERAL ('"postalCode"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"00300"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('addrMap')
. ('.')
identifier ('postalCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"00301"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can use the `keys()` function of the map to get the keys of the map as an array.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
. ('.')
identifier ('keys')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the number of keys in the map.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can remove a key using the `remove()` function.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('isRemoved')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('addrMap')
. ('.')
identifier ('remove')
( ('(')
QUOTED_STRING_LITERAL ('"postalCode"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('addrMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Constrained maps can only contain values of the type specified by the type descriptor.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('stringMap')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// There is no difference in how a value is added or updated in a constrained map')
WHITE_SPACE ('\n    ')
identifier ('stringMap')
[ ('[')
QUOTED_STRING_LITERAL ('"index"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"100892N"')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Notice you do not need explicit conversion to string here when retrieving value from map.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('index')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('stringMap')
. ('.')
identifier ('index')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('index')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Note that Index-based access will return a union of constraint+nil.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the key does not exist a nil value is returned.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('index2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('stringMap')
[ ('[')
QUOTED_STRING_LITERAL ('"index"')
] (']')
WHITE_SPACE (' ')
ELVIS ('?:')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('index2')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
