import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A complex XML defined using the literal syntax and containing nested elements of different types.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sir Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_COMMENT_START ('<!--')
XML_COMMENT_TEXT ('Price: $10-->')
XML_TEXT_SEQUENCE ('\n                  ')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Define namespaces. These are visible to all the XML literals defined from this point onwards.  ')
WHITE_SPACE ('\n    ')
xmlns ('xmlns')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://ballerina.com/"')
; (';')
WHITE_SPACE ('\n    ')
xmlns ('xmlns')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://ballerina.com/aa"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ns0')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an XML element. Previously defined namespaces will be added to the element. ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The defined prefixes can be applied to elements and attributes inside the element. ')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('book')
XML_QNAME (' ns0')
QNAME_SEPARATOR (':')
XML_QNAME ('status')
EQUALS ('=')
DOUBLE_QUOTE ('"')
XML_DOUBLE_QUOTED_STRING_SEQUENCE ('available')
DOUBLE_QUOTE_END ('"')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('ns0')
QNAME_SEPARATOR (':')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('ns0')
QNAME_SEPARATOR (':')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sir Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_COMMENT_START ('<!--')
XML_COMMENT_TEXT ('Price: $10-->')
XML_TEXT_SEQUENCE ('\n                  ')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// XML interpolated with expressions using the `{{}}` notation. ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The expression can be a previously defined variable, arithmetic expressions, or even a function call. ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// These expressions get evaluated during runtime.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('rootTag')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"{http://ballerina.com/aa}newBook"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('title')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"(Sir)"')
; (';')
WHITE_SPACE ('\n\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_TAG_EXPRESSION_START ('{{')
identifier ('rootTag')
EXPRESSION_END ('}}')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEMPLATE_TEXT ('{{')
identifier ('title')
EXPRESSION_END ('}}')
XML_TEXT_SEQUENCE (' Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_COMMENT_START ('<!--')
XML_COMMENT_TEMPLATE_TEXT ('Price: ${{')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('40')
WHITE_SPACE (' ')
/ ('/')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
WHITE_SPACE (' ')
EXPRESSION_END ('}}')
XML_COMMENT_TEXT ('-->')
XML_TEXT_SEQUENCE ('\n                  ')
XML_TAG_OPEN_SLASH ('</')
XML_TAG_EXPRESSION_START ('{{')
identifier ('rootTag')
EXPRESSION_END ('}}')
XML_TAG_CLOSE ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x3')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
