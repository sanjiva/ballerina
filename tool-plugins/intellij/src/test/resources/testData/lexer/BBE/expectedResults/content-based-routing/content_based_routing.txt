import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Define the attributes associated with the client endpoint here.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('locationEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://www.mocky.io"')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/cbr"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('contentBasedRouting')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Use `resourceConfig` annotation to declare the HTTP method.')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/route"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('cbrResource')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('outboundEP')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Get the JSON payload from the request message.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('jsonMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('jsonMsg')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//Get the string value relevant to the key `name`.')
WHITE_SPACE ('\n                ')
string ('string')
WHITE_SPACE (' ')
identifier ('nameString')
; (';')
WHITE_SPACE ('\n\n                ')
identifier ('nameString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('msg')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
; (';')
WHITE_SPACE ('\n                ')
( ('(')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
identifier ('error')
| ('|')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
identifier ('clientResponse')
; (';')
WHITE_SPACE ('\n\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('nameString')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"sanFrancisco"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('//Here, `post` represents the POST action of the HTTP client connector.')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('//This routes the payload to the relevant service when the server accepts the enclosed entity.')
WHITE_SPACE ('\n                    ')
identifier ('clientResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                            ')
identifier ('locationEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/v2/594e018c1100002811d6d39a"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n                ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('clientResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                            ')
identifier ('locationEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/v2/594e026c1100004011d6d39c"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//Use the native function 'respond' to send the client response back to the caller.')
WHITE_SPACE ('\n                ')
match ('match')
WHITE_SPACE (' ')
identifier ('clientResponse')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('respone')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('outboundEP')
-> ('->')
identifier ('respond')
( ('(')
identifier ('respone')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n                            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                    ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('conError')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n                        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n                        ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                        ')
identifier ('outboundEP')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n                            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n                    ')
} ('}')
WHITE_SPACE ('\n                    ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('outboundEP')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n                    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
