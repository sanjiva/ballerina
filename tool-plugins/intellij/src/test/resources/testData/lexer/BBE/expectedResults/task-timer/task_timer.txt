import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('task')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('math')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
; (';')
WHITE_SPACE ('\n')
identifier ('task')
: (':')
identifier ('Timer')
? ('?')
WHITE_SPACE (' ')
identifier ('timer')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Timer task demo"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The cleanup function is called every time the timer goes off.')
WHITE_SPACE ('\n    ')
( ('(')
function ('function')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('error')
? ('?')
) (')')
WHITE_SPACE (' ')
identifier ('onTriggerFunction')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cleanup')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The cleanup error function is called if an error occurs while cleaning up.')
WHITE_SPACE ('\n    ')
function ('function')
( ('(')
identifier ('error')
) (')')
WHITE_SPACE (' ')
identifier ('onErrorFunction')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cleanupError')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Schedule a timer task, which initially runs 500ms from now.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//After that, it runs every 1000ms.')
WHITE_SPACE ('\n    ')
identifier ('timer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('task')
: (':')
identifier ('Timer')
( ('(')
identifier ('onTriggerFunction')
, (',')
WHITE_SPACE (' ')
identifier ('onErrorFunction')
, (',')
WHITE_SPACE ('\n                           ')
DECIMAL_INTEGER_LITERAL ('1000')
, (',')
WHITE_SPACE (' ')
identifier ('delay')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
) (')')
; (';')
WHITE_SPACE ('\n    \n    ')
LINE_COMMENT ('// Start the timer.')
WHITE_SPACE ('\n    ')
identifier ('timer')
. ('.')
start ('start')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('30000')
) (')')
; (';')
WHITE_SPACE (' ')
LINE_COMMENT ('// Temp. workaround to stop the process from exiting.')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('cleanup')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
identifier ('error')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('count')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cleaning up..."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An error is randomly returned to demonstrate how the error is propagated')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// to the 'onError' function when an error occurs in the 'onTrigger'')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// function.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('math')
: (':')
identifier ('randomInRange')
( ('(')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('message')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Cleanup error"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('e')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    \n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('count')
WHITE_SPACE (' ')
>= ('>=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        \n        ')
LINE_COMMENT ('// This is how you stop a timer.')
WHITE_SPACE ('\n        ')
identifier ('timer')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stopped timer"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('cleanupError')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"[ERROR] cleanup failed"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
