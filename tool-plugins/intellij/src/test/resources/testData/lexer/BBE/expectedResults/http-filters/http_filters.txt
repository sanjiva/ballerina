import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('filter_name_header')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"X-filterName"')
; (';')
WHITE_SPACE ('\n')
@ ('@')
identifier ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('filter_name_header_value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"RequestFilter-1"')
; (';')
WHITE_SPACE ('\n\n')
public ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('RequestFilter')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('filterRequest')
( ('(')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('listener')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('FilterContext')
WHITE_SPACE (' ')
identifier ('context')
) (')')
WHITE_SPACE ('\n                        ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// set a header for filter')
WHITE_SPACE ('\n        ')
identifier ('request')
. ('.')
identifier ('setHeader')
( ('(')
identifier ('filter_name_header')
, (',')
WHITE_SPACE (' ')
identifier ('filter_name_header_value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
public ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('filterResponse')
( ('(')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('FilterContext')
WHITE_SPACE (' ')
identifier ('context')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
identifier ('RequestFilter')
WHITE_SPACE (' ')
identifier ('filter')
; (';')
WHITE_SPACE ('\n\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('echoEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
, (',')
WHITE_SPACE ('\n    ')
identifier ('filters')
: (':')
WHITE_SPACE (' ')
[ ('[')
identifier ('filter')
] (']')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('echo')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
identifier ('echoEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/sayHello"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('echo')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setHeader')
( ('(')
identifier ('filter_name_header')
, (',')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getHeader')
( ('(')
identifier ('filter_name_header')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Hello, World!"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
