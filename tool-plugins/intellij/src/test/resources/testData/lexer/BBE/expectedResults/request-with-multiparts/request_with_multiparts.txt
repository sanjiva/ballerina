import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('mime')
; (';')
WHITE_SPACE ('\n\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://localhost:9090"')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/multiparts"')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Binding the listener to the service.')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('multipartDemoService')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"POST"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/decode"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('multipartReceiver')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Extract the bodyparts from the request.')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('request')
. ('.')
identifier ('getBodyParts')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// Setting the error response in case of an error')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('response')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Error in decoding multiparts!"')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('response')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// Iterate through the body parts.')
WHITE_SPACE ('\n            ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n                ')
while ('while')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('part')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyParts')
[ ('[')
identifier ('i')
] (']')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('handleContent')
( ('(')
identifier ('part')
) (')')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n                ')
identifier ('response')
. ('.')
identifier ('setBodyParts')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('bodyParts')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/encode"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('multipartSender')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Create a json body part.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('jsonBodyPart')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('jsonBodyPart')
. ('.')
identifier ('setContentDisposition')
( ('(')
WHITE_SPACE ('\n                        ')
identifier ('getContentDispositionForFormData')
( ('(')
QUOTED_STRING_LITERAL ('"json part"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('jsonBodyPart')
. ('.')
identifier ('setJson')
( ('(')
{ ('{')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"wso2"')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Create an xml body part as a file upload.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('xmlFilePart')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('xmlFilePart')
. ('.')
identifier ('setContentDisposition')
( ('(')
WHITE_SPACE ('\n                       ')
identifier ('getContentDispositionForFormData')
( ('(')
QUOTED_STRING_LITERAL ('"xml file part"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This file path is relative to where the ballerina is running.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If your file is located outside, please')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// give the absolute file path instead.')
WHITE_SPACE ('\n        ')
identifier ('xmlFilePart')
. ('.')
identifier ('setFileAsEntityBody')
( ('(')
QUOTED_STRING_LITERAL ('"./files/test.xml"')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Create an array to hold all the body parts.')
WHITE_SPACE ('\n        ')
identifier ('mime')
: (':')
identifier ('Entity')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bodyParts')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('jsonBodyPart')
, (',')
WHITE_SPACE (' ')
identifier ('xmlFilePart')
] (']')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Set the body parts to the request.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Here the content-type is set as multipart form data.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This also works with any other multipart media type.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// eg:- multipart/mixed, multipart/related etc.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// You need to pass the content type that suit your requirement.')
WHITE_SPACE ('\n        ')
identifier ('request')
. ('.')
identifier ('setBodyParts')
( ('(')
identifier ('bodyParts')
, (',')
WHITE_SPACE (' ')
identifier ('contentType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('MULTIPART_FORM_DATA')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('returnResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/multiparts/decode"')
, (',')
WHITE_SPACE (' ')
identifier ('request')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('returnResponse')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n                ')
identifier ('response')
. ('.')
identifier ('setPayload')
( ('(')
WHITE_SPACE ('\n                            ')
QUOTED_STRING_LITERAL ('"Error occurred while sending multipart request!"')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('response')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('response')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n                ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('returnResult')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('returnResult')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The content logic that handles the body parts vary based on your requirement.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleContent')
( ('(')
identifier ('mime')
: (':')
identifier ('Entity')
WHITE_SPACE (' ')
identifier ('bodyPart')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
identifier ('mime')
: (':')
identifier ('MediaType')
WHITE_SPACE (' ')
identifier ('mediaType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('getMediaType')
( ('(')
identifier ('bodyPart')
. ('.')
identifier ('getContentType')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('mediaType')
. ('.')
identifier ('getBaseType')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
WHITE_SPACE (' ')
|| ('||')
WHITE_SPACE (' ')
identifier ('mime')
: (':')
identifier ('TEXT_XML')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Extract the xml data from the body part and print it.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getXml')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('xmlContent')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
< ('<')
string ('string')
> ('>')
identifier ('xmlContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('APPLICATION_JSON')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Extract the json data from the body part and print it.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getJson')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonContent')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('jsonContent')
. ('.')
identifier ('toString')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('TEXT_PLAIN')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('baseType')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Extract the text data from the body part and print it.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bodyPart')
. ('.')
identifier ('getText')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('textContent')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('textContent')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getContentDispositionForFormData')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('partName')
) (')')
WHITE_SPACE ('\n                                    ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('mime')
: (':')
identifier ('ContentDisposition')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('mime')
: (':')
identifier ('ContentDisposition')
WHITE_SPACE (' ')
identifier ('contentDisposition')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
identifier ('contentDisposition')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('partName')
; (';')
WHITE_SPACE ('\n    ')
identifier ('contentDisposition')
. ('.')
identifier ('disposition')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"form-data"')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('contentDisposition')
; (';')
WHITE_SPACE ('\n')
} ('}')
