import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('jms')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This initializes a JMS connection with the provider.')
WHITE_SPACE ('\n')
identifier ('jms')
: (':')
identifier ('Connection')
WHITE_SPACE (' ')
identifier ('jmsConnection')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('initialContextFactory')
: (':')
QUOTED_STRING_LITERAL ('"bmbInitialContextFactory"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('providerUrl')
: (':')
QUOTED_STRING_LITERAL ('"amqp://admin:admin@carbon/carbon"')
WHITE_SPACE ('\n                ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"?brokerlist='tcp://localhost:5672'"')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This initializes a JMS session on top of the created connection.')
WHITE_SPACE ('\n')
identifier ('jms')
: (':')
identifier ('Session')
WHITE_SPACE (' ')
identifier ('jmsSession')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
identifier ('jmsConnection')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('acknowledgementMode')
: (':')
QUOTED_STRING_LITERAL ('"AUTO_ACKNOWLEDGE"')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This initializes a queue receiver on top of the created sessions.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('jms')
: (':')
identifier ('QueueReceiver')
WHITE_SPACE (' ')
identifier ('queueReceiver')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('session')
: (':')
identifier ('jmsSession')
, (',')
WHITE_SPACE ('\n    ')
identifier ('queueName')
: (':')
QUOTED_STRING_LITERAL ('"MyQueue"')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This keeps the JMS session alive until the message is received by the JMS provider. If the message is not received within five')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// seconds, the session times out.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('queueReceiver')
-> ('->')
identifier ('receive')
( ('(')
identifier ('timeoutInMilliSeconds')
= ('=')
DECIMAL_INTEGER_LITERAL ('5000')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('jms')
: (':')
identifier ('Message')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This is executed if the message is received.')
WHITE_SPACE ('\n            ')
match ('match')
WHITE_SPACE (' ')
( ('(')
identifier ('msg')
. ('.')
identifier ('getTextMessageContent')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
string ('string')
WHITE_SPACE (' ')
identifier ('messageText')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Message : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('messageText')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while reading"')
WHITE_SPACE ('\n                                          ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"message"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
= ('=')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This is executed if the message is not received within five seconds.')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Message not received"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// This is executed if an error occurs.')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Error receiving message. "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
