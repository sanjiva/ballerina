import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('message')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"error occurred"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The Ballerina log API provides functions to log at five levels, which are')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `DEBUG`, `ERROR`, `INFO`, `TRACE`, and `WARN`. By default, all log')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// messages are logged to the console at the `INFO` level. In addition to')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// these log levels, there are 2 additional levels named `OFF` and `ALL`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `OFF` turns off logging and `ALL` enables all the log levels. The log')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// level can be configured via a Ballerina configuration file or CLI')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// parameters.')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printDebug')
( ('(')
QUOTED_STRING_LITERAL ('"debug log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"error log with cause"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"info log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printTrace')
( ('(')
QUOTED_STRING_LITERAL ('"trace log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printWarn')
( ('(')
QUOTED_STRING_LITERAL ('"warn log"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To set the log level of the API, use the following CLI parameter: <br>')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `-e b7a.log.level=[LOG_LEVEL]`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To configure using a configuration file, place the entry given below in')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the file:')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// ```')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// [b7a.log]')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// level="[LOG_LEVEL]"')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// ```')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Each package can also be assigned its own log level. To assign a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// log level to a package, provide the following configuration')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `<PACKAGE_NAME>.loglevel`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// e.g. `-e foo.loglevel=DEBUG`')
WHITE_SPACE ('\n')
} ('}')
