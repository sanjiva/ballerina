import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A `float` to `int` conversion can result in some of the information getting lost.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// However, this type of conversion is always considered safe because the conversion can never fail at runtime.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('10.0')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('f')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An `int` to `string` conversion is always considered safe.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('intVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('strVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('intVal')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A `string` to `int` conversion is considered unsafe.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The compiler requires the user to assign the result of conversion expression to an `int|error` union typed variable.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `error` typed variable represents an error that occurs during the type conversion.')
WHITE_SPACE ('\n    ')
identifier ('strVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Sri Lanka"')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('intResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('strVal')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('intResult')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A `boolean` to `int` conversion is always considered safe. In such conversions, `0` represents a `false` value, and `1` represents a `true` value.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('boolVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('intVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('boolVal')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('intVal')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is an `int` to `boolean` conversion. The boolean value is `false` only if the int value is `0`.')
WHITE_SPACE ('\n    ')
identifier ('intVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
- ('-')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
identifier ('boolVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
boolean ('boolean')
> ('>')
identifier ('intVal')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('boolVal')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is a `string` to `boolean` conversion.')
WHITE_SPACE ('\n    ')
identifier ('strVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"true"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('boolVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
boolean ('boolean')
> ('>')
identifier ('strVal')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('boolVal')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This assigns a value of the `float` type to a variable of the `any` type.')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('3.14')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This shows how to convert a variable of the `any` type to the `float` type.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This conversion is unsafe because the value of the `a` variable is unknown.')
WHITE_SPACE ('\n    ')
float ('float')
? ('?')
WHITE_SPACE (' ')
identifier ('af')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
float ('float')
> ('>')
identifier ('a')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('af')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
