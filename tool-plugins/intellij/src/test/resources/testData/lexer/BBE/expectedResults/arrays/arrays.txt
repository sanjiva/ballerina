import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates an `int` array of length 0.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('a')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This assigns an array literal.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Arrays are unbounded in length. They can grow up to any length based on the given index.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In this example, the length of the array is 1000.')
WHITE_SPACE ('\n    ')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('999')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('999')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This initializes an array of int arrays.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('iarray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('iarray')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This initializes the outermost array with the implicit default value.')
WHITE_SPACE ('\n    ')
identifier ('iarray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('9')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('d')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the first value of the two-dimensional array.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates a sealed `int` array of length 5.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates a sealed `int` array of length 5 with default value `0` as member values.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('f')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// To infer the size of the sealed array from the array literal, following syntax is used.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
! ('!')
... ('...')
] (']')
WHITE_SPACE (' ')
identifier ('g')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
lengthof ('lengthof')
WHITE_SPACE (' ')
identifier ('g')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
