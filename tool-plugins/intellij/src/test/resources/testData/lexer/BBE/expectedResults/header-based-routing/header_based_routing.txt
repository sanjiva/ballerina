import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('locationEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://www.mocky.io"')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('weatherEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://samples.openweathermap.org"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('followRedirects')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('enabled')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE (' ')
identifier ('maxCount')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Service is invoked using `basePath` value "/hbr".')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hbr"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('headerBasedRouting')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//`http:resourceConfig{}` annotation with GET method declares the HTTP method.')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/route"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('hbrResource')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Create new outbound request to handle client call.')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('newRequest')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Checks whether 'x-type' header exists in the request.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
! ('!')
identifier ('req')
. ('.')
identifier ('hasHeader')
( ('(')
QUOTED_STRING_LITERAL ('"x-type"')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('errorResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n            ')
identifier ('errorResponse')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('errMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"error"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"'x-type' header is not found"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
identifier ('errorResponse')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('errMsg')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('errorResponse')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
done ('done')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//`getHeader()` returns header value of a specified header name.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('nameString')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('req')
. ('.')
identifier ('getHeader')
( ('(')
QUOTED_STRING_LITERAL ('"x-type"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
identifier ('error')
WHITE_SPACE (' ')
identifier ('response')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('nameString')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"location"')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//`post()` represent the POST action of HTTP connector. Route payload to relevant service.')
WHITE_SPACE ('\n            ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('locationEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('"/v2/5adddd66300000bd2a4b2912"')
, (',')
WHITE_SPACE ('\n                                        ')
identifier ('newRequest')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('//`get()` action can be used to make http GET call.')
WHITE_SPACE ('\n            ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                ')
identifier ('weatherEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/data/2.5/weather?lat=35&lon=139&appid=b1b1"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('newRequest')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('clientResponse')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('//`respond()` sends back the inbound clientResponse to the caller if no any error is found.')
WHITE_SPACE ('\n                ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('clientResponse')
) (')')
WHITE_SPACE ('\n                    ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                                 ')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('errorResponse')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n                ')
identifier ('errorResponse')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('500')
; (';')
WHITE_SPACE ('\n                ')
identifier ('errorResponse')
. ('.')
identifier ('setPayload')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('errorResponse')
) (')')
WHITE_SPACE ('\n                    ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
WHITE_SPACE ('\n                                 ')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
