import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('math')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('transactions')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the initiator of the distributed transaction.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
< ('<')
identifier ('http')
: (':')
identifier ('Service')
> ('>')
WHITE_SPACE (' ')
identifier ('InitiatorService')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8080')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('init')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('conn')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Initiating transaction..."')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// When the transaction statement starts, a distributed transaction context is created.')
WHITE_SPACE ('\n        ')
transaction ('transaction')
WHITE_SPACE (' ')
with ('with')
WHITE_SPACE (' ')
oncommit ('oncommit')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('printCommit')
, (',')
WHITE_SPACE ('\n                         ')
onabort ('onabort')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('printAbort')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// Print the current transaction ID')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Started transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                             ')
identifier ('transactions')
: (':')
identifier ('getCurrentTransactionId')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// When a participant is called, the transaction context is propagated, and that participant')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// gets infected and joins the distributed transaction.')
WHITE_SPACE ('\n            ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('successful')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('callBusinessService')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('successful')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('OK_200')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('INTERNAL_SERVER_ERROR_500')
; (';')
WHITE_SPACE ('\n                ')
abort ('abort')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n\n            ')
LINE_COMMENT ('// As soon as the transaction block ends, the `2-phase commit')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// coordination` protocol will run. All participants are prepared')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// and depending on the joint outcome, either a `notify commit` or')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `notify abort` will be sent to the participants.')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('conn')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n               ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Could not send response back to client"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n               ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Sent response back to client"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The initiator function that will get called when the distributed transaction')
WHITE_SPACE ('\n')
LINE_COMMENT ('// is aborted')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printAbort')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('transactionId')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Initiated transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('transactionId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" aborted"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The initiator function that will get called when the distributed transaction')
WHITE_SPACE ('\n')
LINE_COMMENT ('// is committed')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printCommit')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('transactionId')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Initiated transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('transactionId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" committed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('callBusinessService')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('participantEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://localhost:8889/stockquote/update"')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('successful')
; (';')
WHITE_SPACE ('\n\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('price')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('math')
: (':')
identifier ('randomInRange')
( ('(')
DECIMAL_INTEGER_LITERAL ('200')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('250')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('math')
: (':')
identifier ('random')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('bizReq')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('symbol')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"GOOG"')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
identifier ('price')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n    ')
identifier ('req')
. ('.')
identifier ('setJsonPayload')
( ('(')
identifier ('bizReq')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('participantEP')
-> ('->')
identifier ('post')
( ('(')
QUOTED_STRING_LITERAL ('""')
, (',')
WHITE_SPACE (' ')
identifier ('req')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
QUOTED_STRING_LITERAL ('"Got response from bizservice"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('successful')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
identifier ('res')
. ('.')
identifier ('statusCode')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('OK_200')
) (')')
WHITE_SPACE (' ')
? ('?')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('successful')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('successful')
; (';')
WHITE_SPACE ('\n')
} ('}')
