import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('close')
( ('(')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('characterChannel')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Close the character channel when done')
WHITE_SPACE ('\n    ')
identifier ('characterChannel')
. ('.')
identifier ('close')
( ('(')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n          ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred while closing character stream"')
, (',')
WHITE_SPACE ('\n                          ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('write')
( ('(')
json ('json')
WHITE_SPACE (' ')
identifier ('content')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a byte channel from the given path')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openFile')
( ('(')
identifier ('path')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('WRITE')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Derive the character channel from the byte channel')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('ch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This is how json content is written via the character channel')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('ch')
. ('.')
identifier ('writeJson')
( ('(')
identifier ('content')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('close')
( ('(')
identifier ('ch')
) (')')
; (';')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('close')
( ('(')
identifier ('ch')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Content written successfully"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('read')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('path')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
json ('json')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a byte channel from the given path')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('ByteChannel')
WHITE_SPACE (' ')
identifier ('byteChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('openFile')
( ('(')
identifier ('path')
, (',')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('READ')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Derive the character channel from the byte channel')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
WHITE_SPACE (' ')
identifier ('ch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('CharacterChannel')
( ('(')
identifier ('byteChannel')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This is how json content is read from the character channel')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('ch')
. ('.')
identifier ('readJson')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('close')
( ('(')
identifier ('ch')
) (')')
; (';')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('close')
( ('(')
identifier ('ch')
) (')')
; (';')
WHITE_SPACE ('\n            ')
throw ('throw')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('filePath')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./files/sample.json"')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Create json content from string')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Store"')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"@id"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AST"')
, (',')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
, (',')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"address"')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"street"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Main"')
, (',')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"city"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"94"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
QUOTED_STRING_LITERAL ('"codes"')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"4"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"8"')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Preparing to write json file"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Write the content')
WHITE_SPACE ('\n    ')
identifier ('write')
( ('(')
identifier ('j1')
, (',')
WHITE_SPACE (' ')
identifier ('filePath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Preparing to read the content written"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Read the content')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('content')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('read')
( ('(')
identifier ('filePath')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('content')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
