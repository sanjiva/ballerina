import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Declare the fork-join statement.')
WHITE_SPACE ('\n    ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" s: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('100')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Reply to the `join` block from worker w1.')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('10.344')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2] f: "')
, (',')
WHITE_SPACE (' ')
identifier ('f')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('100')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Reply to the `join` block from worker w2.')
WHITE_SPACE ('\n            ')
identifier ('f')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// `some 1` is used as the `join` condition, which means that the `join` block needs to wait for any one of the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// workers to finish executing. When the `join` condition has been satisfied, the `results` map will contain the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// value returned by the worker.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
join ('join')
WHITE_SPACE (' ')
( ('(')
some ('some')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
) (')')
WHITE_SPACE (' ')
( ('(')
map ('map')
WHITE_SPACE (' ')
identifier ('results')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Checks if the worker that finished executing is worker `w1`.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w1"')
] (']')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('iW1')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('sW1')
; (';')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w1"')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[join-block] iW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" sW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Checks if the worker that finished executing is worker `w2`.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w2"')
] (']')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
float ('float')
WHITE_SPACE (' ')
identifier ('fW2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
float ('float')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w2"')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[join-block] fW2: "')
, (',')
WHITE_SPACE (' ')
identifier ('fW2')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" s: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('100')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Reply to the `join` block from worker w1.')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Sleep the `w2` for 2 seconds.')
WHITE_SPACE ('\n            ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('2000')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
join ('join')
WHITE_SPACE (' ')
( ('(')
all ('all')
) (')')
WHITE_SPACE (' ')
( ('(')
map ('map')
WHITE_SPACE (' ')
identifier ('results')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This line will not be reached since all workers will not be able to finish their tasks before the timeout.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
timeout ('timeout')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
WHITE_SPACE (' ')
( ('(')
map ('map')
WHITE_SPACE (' ')
identifier ('results')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The `timeout` clause provides an upper bound on how long the `fork` will run until it is aborted.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Timeout should be provided in `milliseconds`. Results of any workers which were completed before the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// timeout will be available in the `results` map (similar to the join condition).')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Check whether the `w1` was finished before the timeout.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w1"')
] (']')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
NULL_LITERAL ('null')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('iW1')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('sW1')
; (';')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w1"')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[timeout-block] iW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" sW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')