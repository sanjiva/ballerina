import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Iterating over a string array:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"banana"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cherry"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To fetch the values defined in the array, use one variable.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To fetch the index and value, use two variables as comma separated values. e.g.,, `foreach i, v in fruits`.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('v')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"fruit: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('v')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a map:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('a')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"banana"')
, (',')
WHITE_SPACE (' ')
identifier ('c')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cherry"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To fetch the values defined in the map, use one variable. To fetch both the key (string) and value, use two')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// variables.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('k')
, (',')
WHITE_SPACE (' ')
identifier ('v')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"letter: "')
, (',')
WHITE_SPACE (' ')
identifier ('k')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", word: "')
, (',')
WHITE_SPACE (' ')
identifier ('v')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a json object:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('apple')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('colors')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"red"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"green"')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To fetch a JSON value, use only a single `json` typed variable.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('apple')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('js')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"string value: "')
, (',')
WHITE_SPACE (' ')
identifier ('js')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
json ('json')
WHITE_SPACE (' ')
identifier ('jx')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"non-string value: "')
, (',')
WHITE_SPACE (' ')
identifier ('jx')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a json array:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To Iterate over a JSON array, you need to first cast it into an array of json (`json[]`).')
WHITE_SPACE ('\n    ')
json ('json')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('colors')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
json ('json')
[ ('[')
] (']')
> ('>')
identifier ('apple')
. ('.')
identifier ('colors')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('colors')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"color "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('": "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over an xml:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('book')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                        ')
XML_TAG_OPEN ('<')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                        ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sir Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To fetch the XML value, use one variable. To get both the index (int) and XML value, use two variables.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('book')
. ('.')
* ('*')
. ('.')
identifier ('elements')
( ('(')
) (')')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"xml at "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('": "')
, (',')
WHITE_SPACE (' ')
identifier ('x')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a closed integer range:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A closed integer range in the foreach statement represents an incremental integer value range from the start')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// expression (1) to the end expression (endValue) inclusively.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
... ('...')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"summation from 1 to "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a half open integer range:-"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A half open integer range in the foreach statement represents an incremental integer value range from the start')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// expression (1) inclusively, to the end expression (endValue) exclusively.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
HALF_OPEN_RANGE ('..<')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"summation from 1 to "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" excluding "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
