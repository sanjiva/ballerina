LINE_COMMENT ('// This is the server implementation for the unary blocking/unblocking scenario.')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('grpc')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The server endpoint configuration.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('grpc')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('listener')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('host')
: (':')
QUOTED_STRING_LITERAL ('"localhost"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('port')
: (':')
DECIMAL_INTEGER_LITERAL ('9090')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
service ('service')
WHITE_SPACE (' ')
identifier ('HelloWorld')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
identifier ('listener')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
identifier ('hello')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
identifier ('grpc')
: (':')
identifier ('Headers')
WHITE_SPACE (' ')
identifier ('headers')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"name: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Reads custom headers in request message.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('headers')
. ('.')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"client_header_key"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Writes custom headers to response message.')
WHITE_SPACE ('\n        ')
identifier ('grpc')
: (':')
identifier ('Headers')
WHITE_SPACE (' ')
identifier ('resHeader')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
identifier ('resHeader')
. ('.')
identifier ('setEntry')
( ('(')
QUOTED_STRING_LITERAL ('"server_header_key"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Response Header value"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Sends response message with headers.')
WHITE_SPACE ('\n        ')
identifier ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('send')
( ('(')
identifier ('message')
, (',')
WHITE_SPACE (' ')
identifier ('headers')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('resHeader')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Server send response : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                                                                    ')
identifier ('message')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Sends `completed` notification to caller.')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('complete')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
