import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an endpoint for H2 database. Change the DB details before running the sample.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:h2:file:./local-transactions/Testdb"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"root"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"root"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create the tables required for the transaction.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE CUSTOMER (ID INTEGER, NAME\n                              VARCHAR(30))"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create CUSTOMER table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE SALARY (ID INTEGER, MON_SALARY FLOAT)"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create SALARY table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here is the transaction block. Any transacted action within the transaction block')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// may return errors like backend DB errors, connection pool errors, etc. User can')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// decide whether to abort or retry based on the error returned. If you do not')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// explicitly abort or retry on a returned error, transaction will be automatically')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// retried until the retry count is reached and aborted.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The retry count that is given with `retries` is the number of times the transaction')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is retried before aborting it. By default, a transaction is tried three times before')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// aborting. Only integer literals or constants are allowed for `retry count`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Two functions can be registered with `oncommit` and `onabort`. Those functions will be')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// executed at the end when the transaction is either aborted or committed.')
WHITE_SPACE ('\n    ')
transaction ('transaction')
WHITE_SPACE (' ')
with ('with')
WHITE_SPACE (' ')
retries ('retries')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
oncommit ('oncommit')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('onCommitFunction')
, (',')
WHITE_SPACE ('\n                                  ')
onabort ('onabort')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('onAbortFunction')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This is the first action participant in the transaction.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO CUSTOMER(ID,NAME)\n                                     VALUES (1, 'Anne')"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is the second action participant in the transaction.')
WHITE_SPACE ('\n        ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO SALARY (ID, MON_SALARY)\n                                 VALUES (1, 2500)"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Inserted count: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('c')
) (')')
; (';')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// If the transaction is forced to abort, it will roll back the transaction')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// and exit the transaction block without retrying.')
WHITE_SPACE ('\n                ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('c')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
abort ('abort')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// If the transaction is forced to retry, it will roll back the transaction,')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// go to the `onretry` block, and retry from the beginning until the defined')
WHITE_SPACE ('\n                ')
LINE_COMMENT ('// retry count is reached.')
WHITE_SPACE ('\n                ')
retry ('retry')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The end curly bracket marks the end of the transaction, and the transaction will')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// be committed or rolled back at this point.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
onretry ('onretry')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The `onretry` block will be executed whenever the transaction is retried until it')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// reaches the retry count. A transaction could be retried if it fails due to an')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// exception or throw statement, or from an explicit retry statement.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Retrying transaction"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Drop the tables.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE CUSTOMER"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table CUSTOMER"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE SALARY"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table SALARY"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Close the connection pool.')
WHITE_SPACE ('\n    ')
identifier ('testDB')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the function used as the commit handler of the transaction block. Any action')
WHITE_SPACE ('\n')
LINE_COMMENT ('// that needs to perform once the transaction is committed should go here.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('onCommitFunction')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('transactionId')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('transactionId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" committed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the function used as the abort handler of the transaction block. Any action')
WHITE_SPACE ('\n')
LINE_COMMENT ('// that needs to perform if the transaction is aborted should go here.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('onAbortFunction')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('transactionId')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('transactionId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" aborted"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle return of the update operation.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
int ('int')
| ('|')
identifier ('error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('returned')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('retInt')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('retInt')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
