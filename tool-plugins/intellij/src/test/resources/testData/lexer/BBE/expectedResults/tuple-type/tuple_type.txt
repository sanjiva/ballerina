import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here, you can define the type of `a` as a pair that consists of an int and a string.')
WHITE_SPACE ('\n    ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('a')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This has a tuple of variable names to the left, and a variable referent of which the type is a tuple.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This assignment statement assigns values of the tuple in the right to the variables in the left.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In Ballerina, this is referred to as tuple destructuring.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('aint')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('astr')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
identifier ('aint')
, (',')
WHITE_SPACE (' ')
identifier ('astr')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('a')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('aint')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('astr')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// You can declare and assign values with `var` as shown here.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('aint1')
, (',')
WHITE_SPACE (' ')
identifier ('astr1')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('a')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This invokes a function that returns a tuple.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('q')
, (',')
WHITE_SPACE (' ')
identifier ('r')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('divideBy10')
( ('(')
DECIMAL_INTEGER_LITERAL ('6')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"06/10: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"quotient="')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('q')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"remainder="')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('r')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//To ignore a return value, use '_'.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//This ignores the second return value.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('q1')
, (',')
WHITE_SPACE (' ')
identifier ('_')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('divideBy10')
( ('(')
DECIMAL_INTEGER_LITERAL ('57')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"57/10: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"quotient="')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('q1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This ignores the first return value.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('_')
, (',')
WHITE_SPACE (' ')
identifier ('r1')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('divideBy10')
( ('(')
DECIMAL_INTEGER_LITERAL ('9')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"09/10: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"remainder="')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('r1')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a tuple of two integers.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('divideBy10')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('d')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('q')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
/ ('/')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('r')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
% ('%')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('q')
, (',')
WHITE_SPACE (' ')
identifier ('r')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
