import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The in scope variables can be accessed by the workers in the fork-join statement.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// These variables can be accessed by the forked workers.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"WSO2"')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Abhaya"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"era"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anuradhapura"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('era')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"era"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[default worker] before fork-join: value of name is ["')
, (',')
WHITE_SPACE (' \n                ')
identifier ('name')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] value of era is ["')
, (',')
WHITE_SPACE (' ')
identifier ('era')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Declare the fork-join statement.')
WHITE_SPACE ('\n    ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('W1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of the integer variable `i` within the worker W1.')
WHITE_SPACE ('\n            ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of map variable `m` within the worker W1.')
WHITE_SPACE ('\n            ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Rajasinghe"')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Define a new variable within the worker to send to the `join` block.')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Send the data to the `join` block of the fork-join from worker W1.')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('n')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('W2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of string variable `s` within the worker W2.')
WHITE_SPACE ('\n            ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of map variable `m` within the worker W2.')
WHITE_SPACE ('\n            ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"era"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Kandy"')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Send the data to the `join` block of the fork-join from worker W2.')
WHITE_SPACE ('\n            ')
identifier ('s')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
join ('join')
WHITE_SPACE (' ')
( ('(')
all ('all')
) (')')
WHITE_SPACE (' ')
( ('(')
map ('map')
WHITE_SPACE (' ')
identifier ('results')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('p')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('l')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Declare variables to receive the results from the forked workers W1 and W2.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The `results` map contains a map of `any` type values from each worker defined within the fork-join statement.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The tuple value received from worker W1 is de-structured and assigned to variables `p` and `l`.')
WHITE_SPACE ('\n        ')
( ('(')
identifier ('p')
, (',')
WHITE_SPACE (' ')
identifier ('l')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"W1"')
] (']')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// The string value received from worker W2 is assigned to the variable `q`.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('q')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"W2"')
] (']')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Print the values received from workers within the `join` block.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[default worker] within join: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' \n                    ')
QUOTED_STRING_LITERAL ('"value of integer variable from W1 is ["')
, (',')
WHITE_SPACE (' ')
identifier ('p')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[default worker] within join: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"value of string variable from W1 is ["')
, (',')
WHITE_SPACE (' ')
identifier ('l')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[default worker] within join: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"value of string variable from W2 is ["')
, (',')
WHITE_SPACE (' ')
identifier ('q')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Print the values after the fork-join statement to check the values of the variables.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The value type variables have not changed since they are passed in as a copy of the original variable.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[default worker] after fork-join: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' \n               ')
QUOTED_STRING_LITERAL ('"value of integer variable is ["')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] "')
, (',')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"value of string variable is ["')
, (',')
WHITE_SPACE (' ')
identifier ('s')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The reference type variables' internal content has got updated since they are passed in')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// as a reference to the workers.')
WHITE_SPACE ('\n    ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('era')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"era"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[default worker] after fork-join: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' \n               ')
QUOTED_STRING_LITERAL ('"value of name is ["')
, (',')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"] value of era is ["')
, (',')
WHITE_SPACE (' ')
identifier ('era')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
