import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
int ('int')
WHITE_SPACE (' ')
identifier ('globalA')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Basic example where a lambda with an 'if' block accesses its outer scope')
WHITE_SPACE ('\n')
LINE_COMMENT ('// variables.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('basicClosure')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('foo')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('  ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('34')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('b')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('c')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('globalA')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('a')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('foo')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Example function with multiple levels of lambda functions in which the')
WHITE_SPACE ('\n')
LINE_COMMENT ('// innermost lambda has access to all of its outer scope variables.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('multilevelClosure')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('func1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('x')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('func2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('y')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
; (';')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
identifier ('func3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('z')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
return ('return')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('z')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('c')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('func3')
( ('(')
DECIMAL_INTEGER_LITERAL ('8')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('x')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('func2')
( ('(')
DECIMAL_INTEGER_LITERAL ('4')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('x')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('func1')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Example showing how function pointers are passed around with closures')
WHITE_SPACE ('\n')
LINE_COMMENT ('// and inner scope lambdas access the outer scope variables.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('functionPointers')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE ('\n                    ')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
( ('(')
function ('function')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('c')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('c')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Invoke the function that shows basic closure support.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('foo')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('basicClosure')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('result1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('foo')
( ('(')
DECIMAL_INTEGER_LITERAL ('3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Answer: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This function invocation shows multiple levels of lambda functions')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// with closure support.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('bar')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('multilevelClosure')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('result2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('bar')
( ('(')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Answer: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This function invocation shows how function pointers with closures')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// are passed around.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('baz1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('functionPointers')
( ('(')
DECIMAL_INTEGER_LITERAL ('7')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('baz2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('baz1')
( ('(')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('result3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('baz2')
( ('(')
DECIMAL_INTEGER_LITERAL ('3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Answer: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result3')
) (')')
; (';')
WHITE_SPACE ('\n\n')
} ('}')
