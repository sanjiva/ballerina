import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('test')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function allows you to compare primitive types (e.g., int) to composite objects.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertIntEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
; (';')
WHITE_SPACE ('\n    ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('intAdd')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('answer')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"IntAdd function failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Compare the values of type float.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFloatEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('10.000')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('20.050')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('answer')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('floatAdd')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('answer')
, (',')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('30.050')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"FloatAdd function failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing strings.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertStringEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Doe"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('concatenated')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('stringConcat')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('concatenated')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"JohnDoe"')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"String concat failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing JSON objects.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertJsonEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('b')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"JSON assert equals failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing boolean values.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertBooleanEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertBooleanEquals failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing string arrays.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertStringArrayEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"A"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"C"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"A"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"B"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"C"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"String arrays are not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing Integer arrays.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertIntArrayEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Int arrays are not equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing Float arrays.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFloatArrayEquals')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
float ('float')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
FLOATING_POINT_LITERAL ('1.1')
, (',')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('2.2')
, (',')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('3.3')
] (']')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
FLOATING_POINT_LITERAL ('1.1')
, (',')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('2.2')
, (',')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('3.3')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('x')
, (',')
WHITE_SPACE (' ')
identifier ('y')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing distinct strings.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertNotEqualsString')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"abc"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"def"')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('test')
: (':')
identifier ('assertNotEquals')
( ('(')
identifier ('s1')
, (',')
WHITE_SPACE (' ')
identifier ('s2')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Strings are equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Comparing distinct JSON objects.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertNotEqualsJson')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"c"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('test')
: (':')
identifier ('assertNotEquals')
( ('(')
identifier ('s1')
, (',')
WHITE_SPACE (' ')
identifier ('s2')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"JSON are equal"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Asserting true.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertTrue')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertTrue')
( ('(')
identifier ('value')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertTrue failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Asserting false.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFalse')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertFalse')
( ('(')
identifier ('value')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertFalse failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Intentionally failing a test.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFail1')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
try ('try')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// I'm expecting an error')
WHITE_SPACE ('\n        ')
identifier ('test')
: (':')
identifier ('assertFail')
( ('(')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Exception Never occured"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE (' ')
catch ('catch')
WHITE_SPACE (' ')
( ('(')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Do more assertions')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Intentionally failing a test-example 2.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAssertFail2')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertFail')
( ('(')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"AssertFailed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('intAdd')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('floatAdd')
( ('(')
float ('float')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
float ('float')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('stringConcat')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
