import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
xmlns ('xmlns')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"http://ballerina.com/aa"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('ns0')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create an XML element that has attributes that are bound to a namespace as well as ones that are not.')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('x1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('ns0')
QNAME_SEPARATOR (':')
XML_QNAME ('book')
XML_QNAME (' ns0')
QNAME_SEPARATOR (':')
XML_QNAME ('status')
EQUALS ('=')
DOUBLE_QUOTE ('"')
XML_DOUBLE_QUOTED_STRING_SEQUENCE ('available')
DOUBLE_QUOTE_END ('"')
XML_QNAME (' count')
EQUALS ('=')
DOUBLE_QUOTE ('"')
XML_DOUBLE_QUOTED_STRING_SEQUENCE ('5')
DOUBLE_QUOTE_END ('"')
XML_TAG_SLASH_CLOSE ('/>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A single attribute that is bound to a namespace can be accessed using its qualified name. ')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('ns0')
: (':')
identifier ('status')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An attribute can also be accessed using the string representation of the qualified name. ')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('x1')
@ ('@')
[ ('[')
QUOTED_STRING_LITERAL ('"{http://ballerina.com/aa}status"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// An attribute that is not bound to a namespace can be accessed using the string representation of the name.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
QUOTED_STRING_LITERAL ('"count"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Access an attribute using a dynamic name.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('attributeName')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"count"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('attributeName')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Update an attribute.')
WHITE_SPACE ('\n    ')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('ns0')
: (':')
identifier ('status')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Not Available"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
[ ('[')
identifier ('ns0')
: (':')
identifier ('status')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// It is possible to get all the attributes at once. However, this cannot be assigned to any variable.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('x1')
@ ('@')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// To assign all the attributes to a variable, it can be cast to a map. Then the values can be accessed one by one using the map access syntax.')
WHITE_SPACE ('\n    ')
map ('map')
WHITE_SPACE (' ')
identifier ('attributeMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
map ('map')
> ('>')
identifier ('x1')
@ ('@')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('attributeMap')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('attributeMap')
[ ('[')
QUOTED_STRING_LITERAL ('"count"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
