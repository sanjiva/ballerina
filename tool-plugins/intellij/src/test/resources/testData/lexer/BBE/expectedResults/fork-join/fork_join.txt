import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The fork-join allows developers to spawn (fork) multiple workers within a Ballerina program, join the results of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// those workers, and execute code on joined results.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Fork worker w1 and w2.')
WHITE_SPACE ('\n    ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n            ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Colombo"')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" s: "')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The reply to the join block from worker w1.')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('10.344')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2] f: "')
, (',')
WHITE_SPACE (' ')
identifier ('f')
) (')')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// The reply to the join block from worker w2.')
WHITE_SPACE ('\n            ')
identifier ('f')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
fork ('fork')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The `all` condition makes the `join` block wait until all the workers have sent in their replies.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Once all the workers have replied, the replies are stored in the `result` variable as a map.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
join ('join')
WHITE_SPACE (' ')
( ('(')
all ('all')
) (')')
WHITE_SPACE (' ')
( ('(')
map ('map')
WHITE_SPACE (' ')
identifier ('results')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Get the values received from worker 'w1'.')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('iW1')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('sW1')
; (';')
WHITE_SPACE ('\n        ')
( ('(')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w1"')
] (']')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[join-block] iW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('iW1')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" sW1: "')
, (',')
WHITE_SPACE (' ')
identifier ('sW1')
) (')')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('fW2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
float ('float')
> ('>')
identifier ('results')
[ ('[')
QUOTED_STRING_LITERAL ('"w2"')
] (']')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[join-block] fW2: "')
, (',')
WHITE_SPACE (' ')
identifier ('fW2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
