import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
? ('?')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getAddress')
( ('(')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('Address')
| ('|')
identifier ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the address does not exist, return an error.')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
( ('(')
identifier ('p')
. ('.')
identifier ('address')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('add')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
return ('return')
WHITE_SPACE (' ')
identifier ('add')
; (';')
} ('}')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('addNotFoundErr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('message')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"address not found"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n            ')
return ('return')
WHITE_SPACE (' ')
identifier ('addNotFoundErr')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('validateAddress')
( ('(')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
boolean ('boolean')
| ('|')
identifier ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `getAddress(person)!city` expression produces a value which is union type of `string|error`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The `check` operation validates the above expression and if it evaluates to a string, the check expression produces a string.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the expression evaluates to an error, the `check` operation immediately exits the enclosing function with that error.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The enclosing function's return type has `error` as an alternative.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('getAddress')
( ('(')
identifier ('person')
) (')')
! ('!')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the check fails, this line will not be printed.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('person')
. ('.')
identifier ('name')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" has a valid city"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('validateAddressAgain')
( ('(')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//The enclosing function's return type does not include `error` as an alternative (it allows only boolean).')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//So, if the "getAddress(person)!city" expression evaluates an error, ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//the `check` expression throws the resulted error.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//Else, the function behaviour is the same as the `validateAddress` function.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
identifier ('getAddress')
( ('(')
identifier ('person')
) (')')
! ('!')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If check fails, this line won't print.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('person')
. ('.')
identifier ('name')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" has a valid city"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('bob')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"bob"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('street')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"1st Avenue"')
, (',')
WHITE_SPACE (' ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Manhattan"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('bob')
. ('.')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"validating bob..."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('bobResult1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('validateAddress')
( ('(')
identifier ('bob')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Bob's result 1:"')
, (',')
WHITE_SPACE (' ')
identifier ('bobResult1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('bobResult2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('validateAddressAgain')
( ('(')
identifier ('bob')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Bob's result 2:"')
, (',')
WHITE_SPACE (' ')
identifier ('bobResult2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('tom')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"tom"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\n"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"validating tom..."')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('tomResult1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('validateAddress')
( ('(')
identifier ('tom')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tom's result 1:"')
, (',')
WHITE_SPACE (' ')
identifier ('tomResult1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('tomResult2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('validateAddressAgain')
( ('(')
identifier ('tom')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This line will not be executed.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tom's result 2:"')
, (',')
WHITE_SPACE (' ')
identifier ('tomResult2')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
