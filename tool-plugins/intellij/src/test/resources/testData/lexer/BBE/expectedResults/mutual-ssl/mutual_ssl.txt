import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a new service endpoint to accept new connections')
WHITE_SPACE ('\n')
LINE_COMMENT ('//that are secured via mutual SSL.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('port')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('9095')
, (',')
WHITE_SPACE ('\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('protocol')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"TLS"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('versions')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"TLSv1.2"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"TLSv1.1"')
] (']')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('ciphers')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Enable mutual SSL.')
WHITE_SPACE ('\n        ')
identifier ('sslVerifyClient')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"require"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('endpoints')
: (':')
WHITE_SPACE (' ')
[ ('[')
identifier ('helloWorldEP')
] (']')
, (',')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Bind the service to the endpoint that you declared above.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
bind ('bind')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('sayHello')
( ('(')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Set the response payload.')
WHITE_SPACE ('\n        ')
identifier ('res')
. ('.')
identifier ('setPayload')
( ('(')
QUOTED_STRING_LITERAL ('"Successful"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send response to client.')
WHITE_SPACE ('\n        ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('res')
) (')')
WHITE_SPACE (' ')
but ('but')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a new client endpoint to connect to the service endpoint you created')
WHITE_SPACE ('\n')
LINE_COMMENT ('//above via mutual SSL. The Ballerina client can be used to connect to the')
WHITE_SPACE ('\n')
LINE_COMMENT ('//created HTTPS listener. Provide the `keyStoreFile`, `keyStorePassword`,')
WHITE_SPACE ('\n')
LINE_COMMENT ('//`trustStoreFile` and `trustStorePassword` in the client.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"https://localhost:9095"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('protocol')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"TLS"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('ciphers')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create a request.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('resp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/hello"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('resp')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('http')
: (':')
identifier ('Response')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
match ('match')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
. ('.')
identifier ('getTextPayload')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
string ('string')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('res')
) (')')
; (';')
WHITE_SPACE ('\n                ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
