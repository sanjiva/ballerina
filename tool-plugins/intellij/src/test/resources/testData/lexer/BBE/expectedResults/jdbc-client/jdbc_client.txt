import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('jdbc')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('sql')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Client endpoint for MySQL database. This client endpoint can be used with any jdbc')
WHITE_SPACE ('\n')
LINE_COMMENT ('// supported database by providing the corresponding jdbc url.')
WHITE_SPACE ('\n')
endpoint ('endpoint')
WHITE_SPACE (' ')
identifier ('jdbc')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('url')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jdbc:mysql://localhost:3306/testdb"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"root"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"root"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the type created to represent data row.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
, (',')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Creates a table using the update operation. If the DDL')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// statement execution is successful, the `update` operation returns 0.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"The update operation - Creating a table:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE student(id INT AUTO_INCREMENT,\n                         age INT, name VARCHAR(255), PRIMARY KEY (id))"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create student table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Inserts data to the table using the update operation. If the DML statement execution')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is successful, the `update` operation returns the updated row count.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The query parameters are given in the query statement it self.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe update operation - Inserting data to a table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO student(age, name) values\n                          (23, 'john')"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Insert to student table with no parameters"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The query parameters are given as variables for the update operation. Only int,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// float, boolean, string and blob values are supported as direct variables.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('24')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Anne"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO student(age, name) values (?, ?)"')
, (',')
WHITE_SPACE ('\n                         ')
identifier ('age')
, (',')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Insert to student table with variable parameters"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The query parameters are given as sql:Parameters for the update operation.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Default direction is IN.')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_VARCHAR')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"James"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO student(age, name) values (?, ?)"')
, (',')
WHITE_SPACE ('\n                          ')
identifier ('p1')
, (',')
WHITE_SPACE (' ')
identifier ('p2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Insert to student table with sql:parameter values"')
) (')')
; (';')
WHITE_SPACE ('\n\n\n    ')
LINE_COMMENT ('// Update data in the table using the update operation.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe Update operation - Update data in a table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"Update student set name = 'Jones' where age = ?"')
, (',')
WHITE_SPACE ('\n                         ')
DECIMAL_INTEGER_LITERAL ('23')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Update a row in student table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Delete data in a table using the update operation.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe Update operation - Delete data from table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DELETE FROM student where age = ?"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('24')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Delete a row from student table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Column values generated during the update can be retrieved using the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `updateWithGeneratedKeys` operation. If the table has several auto')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// generated columns other than the auto incremented key, those column')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// names should be given as an array. The values of the auto incremented')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// column and the auto generated columns are returned as a string array.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Similar to the `update` operation, the inserted row count is also returned.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe updateWithGeneratedKeys operation - Inserting data"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('31')
; (';')
WHITE_SPACE ('\n    ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Kate"')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retWithKey')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('updateWithGeneratedKeys')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO student\n                        (age, name) values (?, ?)"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('age')
, (',')
WHITE_SPACE (' ')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('retWithKey')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
identifier ('y')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('count')
, (',')
WHITE_SPACE (' ')
identifier ('ids')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('y')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Inserted row count: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Generated key: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('ids')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Insert to table failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A batch of data can be inserted using the `batchUpdate` operation. The number')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// of inserted rows for each insert in the batch is returned as an array.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe batchUpdate operation - Inserting a batch of data"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('para1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('27')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('para2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_VARCHAR')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Alex"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('parameters1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('para1')
, (',')
WHITE_SPACE (' ')
identifier ('para2')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Create the second batch of parameters.')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('para3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('para4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_VARCHAR')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('parameters2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('para3')
, (',')
WHITE_SPACE (' ')
identifier ('para4')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Do the batch update by passing the multiple parameter arrays.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retBatch')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('batchUpdate')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO student(age, name)\n                    values (?, ?)"')
, (',')
WHITE_SPACE (' ')
identifier ('parameters1')
, (',')
WHITE_SPACE (' ')
identifier ('parameters2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('retBatch')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('counts')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Batch 1 update counts: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('counts')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Batch 2 update counts: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('counts')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Batch update operation failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call operiation is used to invoke a stored procedure. Here stored procedure')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// with IN parameters is invoked.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe call operation - With IN params"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create the stored procedure')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE PROCEDURE INSERTDATA(IN pAge INT,\n                       IN pName VARCHAR(255))\n	                   BEGIN\n                       INSERT INTO student(age, name) values (pAge, pName);\n                       END"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stored procedure with IN param creation"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Invoke the stored procedure with IN type parameters.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('retCall')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('call')
( ('(')
QUOTED_STRING_LITERAL ('"{CALL INSERTDATA(?,?)}"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('19')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"George"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('retCall')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
| ('|')
table ('table')
[ ('[')
] (']')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Call operation with IN params successful"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stored procedure call failed: "')
WHITE_SPACE ('\n                              ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Here stored procedure with OUT and INOUT parameters is invoked.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe call operation - With INOUT/OUT params"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create the stored procedure.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE PROCEDURE GETCOUNT (INOUT pID INT,\n                          OUT pCount INT)\n                          BEGIN\n                          SELECT id INTO pID FROM student WHERE age = pID;\n                          SELECT COUNT(*) INTO pCount FROM student\n                            WHERE age = 27;\n                          END"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Stored procedure with INOUT/OUT param creation"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Inovke the stored procedure.')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('param1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE (' ')
identifier ('value')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE ('\n        ')
identifier ('direction')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('DIRECTION_INOUT')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sql')
: (':')
identifier ('Parameter')
WHITE_SPACE (' ')
identifier ('param2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('sqlType')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('TYPE_INTEGER')
, (',')
WHITE_SPACE ('\n        ')
identifier ('direction')
: (':')
WHITE_SPACE (' ')
identifier ('sql')
: (':')
identifier ('DIRECTION_OUT')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('retCall')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('call')
( ('(')
QUOTED_STRING_LITERAL ('"{CALL GETCOUNT(?,?)}"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE (' ')
identifier ('param1')
, (',')
WHITE_SPACE (' ')
identifier ('param2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('retCall')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
| ('|')
table ('table')
[ ('[')
] (']')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Call operation with INOUT and OUT params successful"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Student ID of the person with age = 25: "')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('param1')
. ('.')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"Student count with age = 27: "')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('param2')
. ('.')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Stored procedure call failed: "')
WHITE_SPACE ('\n                                ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A proxy for a database table that allows performing add/remove operations over')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the actual database table, can be obtained by `getProxyTable` operation.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe getProxyTable operation - Get a proxy for a table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('proxyRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('getProxyTable')
( ('(')
QUOTED_STRING_LITERAL ('"student"')
, (',')
WHITE_SPACE (' ')
identifier ('Student')
) (')')
; (';')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Student')
> ('>')
WHITE_SPACE (' ')
identifier ('tbProxy')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('proxyRet')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
table ('table')
WHITE_SPACE (' ')
identifier ('tbReturned')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('tbProxy')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tbReturned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Proxy table retrieval failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Iterate through the table and retrieve the data record corresponding to each row.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('row')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('tbProxy')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Student:"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('id')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Data can be added to the database table through the proxied table.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nAdd data to a proxied table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Tim"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('14')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('addRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tbProxy')
. ('.')
identifier ('add')
( ('(')
identifier ('s')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('addRet')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Insertion to table successful"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Insertion to table failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Data can be removed from the database table through the proxied table, by passing')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// a function pointer which returns a boolean value evaluating whether a given record')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// should be removed or not.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nRemove data from a proxied table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('rmRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tbProxy')
. ('.')
identifier ('remove')
( ('(')
identifier ('isUnder20')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('rmRet')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Removed count: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Removing from table failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Select data using the `select` operation. The `select` operation returns a table.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// See the `table` ballerina example for more details on how to access data.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe select operation - Select data from a table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('selectRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('select')
( ('(')
QUOTED_STRING_LITERAL ('"SELECT * FROM student"')
, (',')
WHITE_SPACE (' ')
identifier ('Student')
) (')')
; (';')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Student')
> ('>')
WHITE_SPACE (' ')
identifier ('dt')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('selectRet')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
table ('table')
WHITE_SPACE (' ')
identifier ('tableReturned')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('dt')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tableReturned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Select data from student table failed: "')
WHITE_SPACE ('\n                               ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Conversion from type 'table' to either JSON or XML results in data streaming.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// When a service client makes a request, the result is streamed to the service')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// client rather than building the full result in the server and returning it.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This allows unlimited payload sizes in the result and the response is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// instantaneous to the client.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Convert a table to JSON.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('jsonConversionRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('dt')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('jsonConversionRet')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonRes')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"JSON: "')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('jsonRes')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error in table to json conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Re-iteration of the result is possible only if `loadToMemory` named argument')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// is set to `true` in `select` operation.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe select operation - By loading table to memory"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('selectRet')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('select')
( ('(')
QUOTED_STRING_LITERAL ('"SELECT * FROM student"')
, (',')
WHITE_SPACE (' ')
identifier ('Student')
, (',')
WHITE_SPACE ('\n        ')
identifier ('loadToMemory')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('selectRet')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
table ('table')
WHITE_SPACE (' ')
identifier ('tableReturned')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('dt')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('tableReturned')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Select data from student table failed: "')
WHITE_SPACE ('\n                               ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Iterating data first time.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Iterating data first time:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('row')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('dt')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Student:"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('id')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Iterating data second time.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Iterating data second time:"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
identifier ('row')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('dt')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Student:"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('id')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"|"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('row')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//Drop the table and procedures.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe update operation - Drop the tables and procedures"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE student"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop table student"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP PROCEDURE INSERTDATA"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop stored procedure INSERTDATA"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP PROCEDURE GETCOUNT"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop stored procedure GETCOUNT"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Finally, close the connection pool.')
WHITE_SPACE ('\n    ')
identifier ('testDB')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Check crieteria for remove.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('isUnder20')
( ('(')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
boolean ('boolean')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('s')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
< ('<')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle return of the update operation.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
int ('int')
| ('|')
identifier ('error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('returned')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('retInt')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('retInt')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
