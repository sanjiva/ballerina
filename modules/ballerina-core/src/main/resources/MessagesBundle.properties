#
# Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#the following will interpreted as: invalid type 'typName'
invalid.type = invalid type ''{0}''
incompatible.types = incompatible types: expected ''{0}'', found ''{1}''
redeclared.symbol = redeclared symbol ''{0}''
incompatible.types.cannot.convert = incompatible types: ''{0}'' cannot be converted to ''{1}''
incompatible.types.cannot.cast = incompatible types: ''{0}'' cannot be cast to ''{1}''
unreachable.statement = unreachable statement
incompatible.types.boolean.expected = incompatible types: expected ''boolean'', found ''{0}''
no.statements.while.loop = no statements in the while loop in
unknown.operator.in.unary = unknown operator ''{0}'' in unary expression
ref.type.init.not.allowed.here = reference type initializer is not allowed here
struct.map.init.not.allowed = struct/map initializer is not allowed here
connector.init.not.allowed = connector initializer is not allowed here
array.init.not.allowed.here = array initializer is not allowed here
invalid.field.name.struct.init = invalid field name in struct initializer
unknown.field.in.struct = unknown field ''{0}'' in struct ''{1}''
invalid.type.in.map.index.expected.string = invalid type ''{0}'' in map index: expected ''string''
undefined.symbol = undefined symbol ''{0}''
non.integer.array.index = non-integer array index type ''{0}''
non.string.map.index = non-string map index type ''{0}''
invalid.operation.not.support.indexing = invalid operation: type ''{0}'' does not support indexing
multiple.value.in.single.value.context = multiple-value ''{0}()'' in single-value context
reply.statement.cannot.used.in.function = reply statement cannot be used in a function definition
reply.statement.cannot.used.in.action = reply statement cannot be used in a action definition
action.invocation.not.allowed.in.reply = action invocation is not allowed in a reply statement
return.cannot.used.in.resource = return statement cannot be used in a resource definition
not.enough.arguments.to.return = not enough arguments to return
too.many.arguments.to.return = too many arguments to return
cannot.use.type.in.return.statement = incompatible types in return statement. expected ''{0}'', found ''{1}''
cannot.use.create.for.value.types = cannot use ''create'' for value types
incompatible.types.expected.xml = incompatible types: expected xml
cannot.assign.value.constant = cannot assign a value to constant ''{0}''
assignment.count.mismatch = assignment count mismatch: {0} != {1}
cannot.assign.in.multiple.assignment = cannot assign {0} to ''{1}'' (type {2}) in multiple assignment
var.is.repeated.on.left.side.assignment = ''{0}'' is repeated on the left side of assignment
undefined.function  = undefined function ''{0}''
undefined.connector = undefined connector ''{0}''
undefined.action = undefined action ''{0}'' in connector ''{1}''
undefined.native.action = undefined native action ''{0}'' in connector ''{1}''
invalid.operation.operator.not.defined = invalid operation: operator {0} not defined on ''{1}''
struct.not.found = struct ''{0}'' not found
must.be.struct.type = {0} must be of struct type
invalid.operation.incompatible.types = invalid operation: incompatible types ''{0}'' and ''{1}''
unused.import.package = unused import package ''{0}''
redeclared.import.package = redeclared import package name ''{0}''
unsupported.operator = unsupported operator ''{0}''
action.invocation.not.allowed.here = action invocation is not allowed here
ref.type.message.allowed = only a variable reference of type ''message'' is allowed here
undefined.package.name = undefined package name ''{0}'' in ''{1}''
template.expression.not.allowed.here = xml/json template expression is not allowed here
connector.init.not.allowed.here = connector initializer is not allowed here
only.count.1.allowed.this.version = only count 1 is allowed in this version
only.error.type.here = only a struct type structurally equivalent to 'ballerina.lang.errors:Error' is allowed here
break.stmt.not.allowed.here = break statement is not allowed here
undefined.type.mapper = undefine type mapper ''{0}''
incompatible.types.unknown.found = incompatible types: expected a ''{0}''
built.in.type.names.not.allowed.as.identifier = {0} is a built in type name which is not allowed as identifier
incompatible.types.connector.expected = incompatible types: expected a connector name, found ''{0}''
ambiguous.functions  = function reference ''{0}'' is ambiguous, functions ''{1}'' and ''{2}'' matches
casting.any.to.wrong.value.type = cannot cast ''any'' with type ''{0}'' to type ''{1}''
casting.any.without.init = cannot cast ''null'' value to type ''{0}''
unsupported.annotation.attribute.value = unsupported attribute value. only basic literals are allowed
undefined.annotation = undefined annotation ''{0}''
annotation.not.allowed = annotation ''{0}'' is not allowed in {1}s
no.such.attribute = no such attribute ''{0}'' in annotation ''{1}''
invalid.default.value = only value types are allowed for default values
invalid.attribute.type = invalid attribute type ''{0}''. only value types and annotations allowed
incompatible.types.array.found = incompatible types: expected a ''{0}'', found an array
worker.interaction.not.valid = worker interaction is not valid
incompatible.assignment = incompatible types: ''{0}'' cannot be assigned to ''{1}''
index.number.too.large = index number too large: {0}
array.index.out.of.range = array index out of range: index: {0}, size: {1}
casting.without.required.field = cannot cast ''{0}'' to type ''{1}'': no such field ''{2}''
missing.field = error while mapping ''{0}'': no such field found
casting.failed.with.cause = cannot cast ''{0}'' to type ''{1}'': {2}
cannot.set.value.incompatible.types = cannot set value to ''{0}'': expected a ''{1}'', but found ''{2}''
cannot.get.value.incompatible.types = cannot get value from ''{0}'': expected a ''{1}'', but found ''{2}''
incompatible.field.type.for.casting = error while mapping ''{0}'': incompatible types: expected ''{1}'', found ''{2}''
incompatible.types.in.json = incompatible types: expected ''{0}'', found ''{1}'' in json
indexing.not.supported.map.element = invalid operation: indexing is not supported for map elements of type ''{0}''. cast the value before access with index
json.set.error = failed to set element to json: {0}
json.get.error = failed to get element from json: {0}
dynamic.keys.not.supported.for.struct = only static keys are supported for accessing struct fields
struct.field.child.has.pkg.identifier = struct child fields cannot have package identifiers: ''{0}''
duplicated.error.catch = error ''{0}'' already caught in try catch block
reserved.identifier = identifier ''{0}'' is a reserved identifier
ignored.assignment = assignment statement should have at least one variable assignment
cannot.assign.value.array.length = cannot assign a value to array length
missing.return.statement = missing return statement
transform.statement.no.body = no statements found in the transform statement body
transform.statement.invalid.input.output=input and output variables cannot be interchanged in transform statement
