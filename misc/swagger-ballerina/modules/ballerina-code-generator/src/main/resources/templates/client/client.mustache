import ballerina/io;
import ballerina/mime;
import ballerina/http;

//=====================================
//============Client Config============
//=====================================
struct {{name}}ClientConfig {
    string serviceUrl;
}

//=======================================
//============Client Endpoint============
//=======================================
struct {{name}}ClientEp {
    http:Client client;
    {{name}}ClientConfig config;
}

function <{{name}}ClientEp ep> init({{name}}ClientConfig config) {
    endpoint http:Client httpEp {
        targets:[{url: config.serviceUrl}]
    };

    ep.client = httpEp;
    ep.config = config;
}

function <{{name}}ClientEp ep> getClient() returns ({{name}}Client) {
    return {clientEp: ep};
}

//==============================
//============Client============
//==============================
struct {{name}}Client {
    {{name}}ClientEp clientEp;
}

{{#resources}}
function <{{../name}}Client client> {{name}}({{#parameters}}{{type}} {{name}}{{#unless @last}}, {{/unless}}{{/parameters}}) returns http:Response | error {
    endpoint http:Client ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed{{#contentType}}
    request.setHeader("Content-Type", "{{contentType}}");{{/contentType}}
    string path = string `{{path}}`;
    var res = ep -> {{lower method}}(path, request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/resources}}
{{#if endpoints}}//======================================================
//============Invocation of Generated Client============
//======================================================
function main (string[] args) { {{#endpoints}}
    endpoint {{../name}}ClientEp ep{{@index}} {
        serviceUrl: "{{url}}"
    };{{/endpoints}}

    {{#resources.0}}
    // Sample invocation of the generated client connector
    var res = ep0 -> {{name}}({{#parameters}}{{>arguments}}{{/parameters}});
    match (res) {
        error err => io:println(err.message);
            http:Response resp => {
                var payload = resp.getStringPayload();
                match payload {
                    mime:EntityError err =>io:println(err.message);
                    string message => io:println(message);
                    any | null => io:println("No response message");
                }
            }
    }{{/resources.0}}
}{{/if}}
