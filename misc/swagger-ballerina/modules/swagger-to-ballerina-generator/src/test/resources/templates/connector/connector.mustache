{{#apiPackage}}package {{apiPackage}};

{{/apiPackage}}{{#modelPackage}}import {{modelPackage}};{{/modelPackage}}
import ballerina/io;
import ballerina/mime;
import ballerina/net.http;

//=====================================
//============Client Config============
//=====================================
struct {{cut info.title " "}}ClientConfig {
    string serviceUrl;
}

//=======================================
//============Client Endpoint============
//=======================================
struct {{cut info.title " "}}ClientEp {
    http:ClientEndpoint client;
    {{cut info.title " "}}ClientConfig config;
}

function <{{cut info.title " "}}ClientEp ep> init({{cut info.title " "}}ClientConfig config) {
    endpoint http:ClientEndpoint httpEp {
        targets: [{uri: config.serviceUrl}]
    };

    ep.client = httpEp;
    ep.config = config;
}

function <{{cut info.title " "}}ClientEp ep> getClient() returns ({{cut info.title " "}}Client) {
    return {clientEp: ep};
}

//==============================
//============Client============
//==============================
struct {{cut info.title " "}}Client {
    {{cut info.title " "}}ClientEp clientEp;
}

{{#paths}}{{#value}}{{#get}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> get("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/get}}{{#post}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> post("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/post}}{{#put}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> put("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/put}}{{#delete}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> delete("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/delete}}{{#options}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> options("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/options}}{{#head}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> head("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/head}}{{#patch}}
function <{{cut info.title " "}}Client client> {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
    endpoint http:ClientEndpoint ep = client.clientEp.client;
    http:Request request = {};

    //Create the required request as needed
    var res = ep -> patch("{{@key}}", request);

    match res {
        http:HttpConnectorError httpError => {
            error err = {message: httpError.message};
            return err;
        }
        http:Response resp => return resp;
    }
}
{{/patch}}{{/value}}{{/paths}}