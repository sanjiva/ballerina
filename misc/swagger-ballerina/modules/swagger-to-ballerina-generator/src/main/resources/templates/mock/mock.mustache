import ballerina/http;
import ballerina/log;
import ballerina/mime;
import ballerina/swagger;

{{#servers}}endpoint http:Listener ep{{@index}} { {{#host}}
    host: "{{host}}",{{/host}}
    port: {{port}}
};
{{/servers}}
@swagger:ServiceInfo { {{#info}}
    title: "{{title}}"{{#description}},
    description: "{{description}}"{{/description}},
    serviceVersion: "{{version}}"{{#termsOfService}},
    termsOfService: "{{termsOfService}}"{{/termsOfService}}{{#contact}},
    contact: {name: "{{contact.name}}", email: "{{contact.email}}", url: "{{contact.url}}"}{{/contact}}{{#license}},
    license: {name: "{{license.name}}", url: "{{license.url}}"}{{/license}}{{/info}}{{#if tags}},
    tags: [{{#tags}}
        {name: "{{name}}", description: "{{description}}", {{=<% %>=}}externalDocs: <%>doc%><%={{ }}=%>}{{#unless @last}},{{/unless}}{{/tags}}
    ]{{/if}}{{#if externalDocs}},
    externalDocs: {{>doc}}{{/if}}{{#if security}},
    security: [{{#security}}
        {{>security}}{{/security}}
    ]{{/if}}
}
@http:ServiceConfig {
    basePath: "{{servers.0.basePath}}"{{!-- {{only one base path is allowed for all endpoints}} --}}
}
service {{cut info.title " "}} bind {{#servers}}ep{{@index}}{{#unless @last}}, {{/unless}}{{/servers}} {
{{#paths}}{{#value}}{{#operations}}{{#value}}
    @swagger:ResourceInfo {
        summary: "{{summary}}"{{#if tags}},
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}]{{/if}}{{#if description}},
        description: "{{description}}"{{/if}}{{#if externalDocs}},
        externalDocs: {{>doc}}{{/if}}{{#if parameters}},
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]{{/if}}
    }
    @http:ResourceConfig { {{#equals key "multi"}}{{#if methods}}
        methods:[{{#methods}}"{{.}}"{{#unless @last}}, {{/unless}}{{/methods}}],{{/if}}{{else}}
        methods:["{{upper key}}"],{{/equals}}
        path:"{{../../key}}"{{#requestBody}}{{#equals "multipart/form-data" requestBody.selectedMedia.mediaType}}{{else}},
        body:"_{{operationId}}Body"{{/equals}}{{/requestBody}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    {{operationId}} (endpoint outboundEp, http:Request _{{operationId}}Req{{#parameters}}{{>pathParams}}{{/parameters}}{{#requestBody}}{{>reqBody}}{{/requestBody}}) { {{#equals requestBody.selectedMedia.mediaType "multipart/form-data"}}
        mime:Entity[] _{{operationId}}Body = check _{{operationId}}Req.getBodyParts();
    {{/equals}}
        http:Response _{{operationId}}Res = {{operationId}}(_{{operationId}}Req{{#parameters}}{{#equals in "path"}}, {{name}}{{/equals}}{{/parameters}}{{#requestBody}}, _{{operationId}}Body{{/requestBody}});
        outboundEp->respond(_{{operationId}}Res) but { error e => log:printError("Error while responding", err = e) };
    }
{{/value}}{{/operations}}{{/value}}{{/paths}}
}
