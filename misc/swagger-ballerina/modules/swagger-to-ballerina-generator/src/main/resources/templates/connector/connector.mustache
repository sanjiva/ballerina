import ballerina/io;
import ballerina/mime;
import ballerina/http;

//=====================================
//============Client Config============
//=====================================
public type {{cut info.title " "}}ClientConfig {
    string serviceUrl,
};

//=======================================
//============Client Endpoint============
//=======================================
public type {{cut info.title " "}}ClientEp object {
    public {
        http:Client client;
        {{cut info.title " "}}ClientConfig config;
    }

    public function init({{cut info.title " "}}ClientConfig config) {
        endpoint http:Client httpEp {
            targets:[{url: config.serviceUrl}]
        };

        self.client = httpEp;
        self.config = config;
    }

    public function getClient() returns ({{cut info.title " "}}Client) {
        return new {{cut info.title " "}}Client(self);
    }
};

//==============================
//============Client============
//==============================
public type {{cut info.title " "}}Client object {
    public {
        {{cut info.title " "}}ClientEp clientEp;
    }

    new (clientEp) {}
{{#paths}}{{#value}}{{#get}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> get("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
    {{/get}}{{#post}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> post("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
    {{/post}}{{#put}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> put("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
    {{/put}}{{#delete}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> delete("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
    {{/delete}}{{#options}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> options("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
    {{/options}}{{#head}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> head("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
    {{/head}}{{#patch}}
    public function {{operationId}}({{#parameters}}{{>pathParams}}{{/parameters}}) returns http:Response | error {
        endpoint http:Client ep = self.clientEp.client;
        http:Request request = new;

        //Create the required request as needed
        var res = ep -> patch("{{@key}}", request);

        match res {
            http:HttpConnectorError httpError => {
                error err = {message: httpError.message};
                return err;
            }
            http:Response resp => return resp;
        }
    }
{{/patch}}{{/value}}{{/paths}}
};
