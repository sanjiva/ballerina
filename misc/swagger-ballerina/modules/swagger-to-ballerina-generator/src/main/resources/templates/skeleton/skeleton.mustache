package {{apiPackage}};

import ballerina.net.http;

{{#host}}
@http:configuration {
    host: "{{host}}",{{#port}}
    port: {{port}},{{/port}}{{#httpsPort}}
    httpsPort: {{httpsPort}},{{/httpsPort}}
    basePath: "{{basePath}}"
}{{/host}}
service<http> {{cut info.title " "}} {
{{#paths}}
{{#value}}
{{#get}}
    @http:resourceConfig {
        methods:["GET"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub de - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/get}}
{{#post}}
    @http:resourceConfig {
        methods:["POST"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/post}}
{{#put}}
    @http:resourceConfig {
        methods:["PUT"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/put}}
{{#delete}}
    @http:resourceConfig {
        methods:["DELETE"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/delete}}
{{#options}}
    @http:resourceConfig {
        methods:["OPTIONS"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/options}}
{{#head}}
    @http:resourceConfig {
        methods:["HEAD"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/head}}
{{#patch}}
    @http:resourceConfig {
        methods:["PATCH"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/patch}}
{{#trace}}
    @http:resourceConfig {
        methods:["TRACE"],
        path:"{{key}}"
    }
    resource {{operationId}} (http:Connection conn, http:Request inReq{{#parameters}}{{>pathParams}}{{/parameters}}) {
        //stub code - fill as necessary
        http:Response resp = {};
        string payload = "Sample {{operationId}} Response";
        resp.setStringPayload(payload);
        _ = conn.respond(resp);
    }
{{/trace}}
{{/value}}
{{/paths}}
}

