package {{packageName}};
import ballerina.net.grpc;
{{#connectors}}
public connector {{connectorId}}BlockingStub(string host, int port){
 endpoint<grpc:GRPCConnector> ep {
        create grpc:GRPCConnector(host, port, "{{stubType}}", descriptorKey, descriptorMap);
    }
    {{#blockingAction}}
    action {{operationId}}Blocking ({{inputDataType}} req) ({{outputDataType}}, error) {
        var res, err1 = ep.blockingExecute("{{methodId}}", req);
        if (err1 != null) {
            error e = {message:err1.message};
            return null, e;
        }
        var response, err2 = ({{outputDataType}})res;
        if (err2 != null) {
            error e = {message:err2.message};
            return null, e;
        }
        return response, null;
    }{{/blockingAction}}
{{#nonBlockingAction}}
    action {{operationId}}NonBlocking ({{inputDataType}} req, string serviceName) (error) {
        var err1 = ep.nonBlockingExecute("{{methodId}}", req, serviceName);
        if (err1 != null) {
            error e = {message:err1.message};
            return e;
        }
        return null;
    }{{/nonBlockingAction}}
{{#streamingAction}}
    action {{operationId}}Stream ({{inputDataType}} serviceName) (grpc:ClientConnection, error) {
        var res, err1 = ep.streamingExecute("{{methodId}}", serviceName);
        if (err1 != null && err1.message != null) {
            error e = {message:err1.message};
            return null, e;
        }
        var response, err2 = (grpc:ClientConnection)res;
        if (err2 != null && err2.message != null) {
            error e = {message:err2.message};
            return null, e;
        }
        return response,null;
    };{{/streamingAction}}
}
{{/connectors}}

{{#struct}}
struct {{structId}} {
{{#attribute}}
{{type}} {{name}};{{/attribute}}
}
{{/struct}}

const string descriptorKey = {{rootDescriptorKey}};

map descriptorMap =
{{#descriptors}}
{
    {{#descriptor}}
    "{{descriptorKey}}":"{{descriptorData}}"{{EOE}}
    {{/descriptor}}
}
{{/descriptors}}


