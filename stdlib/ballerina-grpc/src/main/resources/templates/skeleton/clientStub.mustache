import ballerina/grpc;
import ballerina/io;
{{#stubObject}}
public type {{connectorId}}{{stubTypeName}}{{stubType}}Stub object {
    {{#stubs}}
    public {
        grpc:Client clientEndpoint;
        grpc:Stub stub;
    }

    function initStub (grpc:Client clientEndpoint) {
        grpc:Stub navStub = new;
        navStub.initStub(clientEndpoint, "{{stubType}}", DESCRIPTOR_KEY, descriptorMap);
        self.stub = navStub;
    }
    {{/stubs}}{{#blockingFunctions}}
    function {{operationId}} ({{inputDataType}}{{&space}}{{inputAttributeName}}{{inputComma}}{{&space}}grpc:Headers? headers = ()) returns (({{outputDataType}}{{outputComma}} grpc:Headers)|error) {
        {{&initEmptyStub}}
        var unionResp = self.stub.blockingExecute("{{methodId}}", req, headers = headers);
        match unionResp {
            error payloadError => {
                return payloadError;
            }
            (any, grpc:Headers) payload => {
                any result;
                grpc:Headers resHeaders;
                ({{resultCast}}, resHeaders) = payload;
                return {{&openBracket}}{{&castSymbolOpen}}{{outputDataType}}{{&castSymbolClose}}{{resultOut}}{{outputComma}}{{&space}}resHeaders{{&closeBracket}};
            }
        }
    }
    {{/blockingFunctions}}{{#nonBlockingFunctions}}
    function {{operationId}} ({{inputDataType}}{{&space}}{{inputAttributeName}}{{inputComma}}{{&space}}typedesc listener, grpc:Headers? headers = ()) returns (error?) {
        return self.stub.nonBlockingExecute("{{methodId}}", req, listener, headers = headers);
    }
    {{/nonBlockingFunctions}}{{#streamingFunctions}}
    function {{operationId}} (typedesc listener, grpc:Headers? headers = ()) returns (grpc:Client| error)  {
        var res = self.stub.streamingExecute("{{methodId}}", listener, headers = headers);
        match res {
            error err => {
                return err;
            }
            grpc:Client con => {
                return con;
            }
        }
    }
    {{/streamingFunctions}}
};
{{/stubObject}}
{{#client}}
public type {{connectorId}}{{stubTypeName}}{{stubType}}Client object {
    {{#stubObjects}}
    public {
        grpc:Client client;
        {{connectorId}}{{stubTypeName}}Stub stub;
    }

    public function init (grpc:ClientEndpointConfig config) {
        // initialize client endpoint.
        grpc:Client client = new;
        client.init(config);
        self.client = client;
        // initialize service stub.
        {{connectorId}}{{stubTypeName}}Stub stub = new;
        stub.initStub(client);
        self.stub = stub;
    }

    public function getCallerActions () returns ({{connectorId}}{{stubTypeName}}Stub) {
        return self.stub;
    }{{/stubObjects}}
};
{{/client}}
{{#structs}}
type {{structId}} {
    {{#attribute}}{{type}}{{label}} {{name}};
    {{/attribute}}
};
{{/structs}}
{{#enums}}
enum {{enumId}} {
{{#enumAttribute}}{{name}}{{eoe}}
{{/enumAttribute}}
}
{{/enums}}
@final string DESCRIPTOR_KEY = "{{rootDescriptorKey}}";
map descriptorMap =
{ {{#descriptors}}
    "{{descriptorKey}}":"{{descriptorData}}"{{eoe}}
  {{/descriptors}}
};