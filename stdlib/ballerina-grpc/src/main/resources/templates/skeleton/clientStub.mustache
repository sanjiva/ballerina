package {{packageName}};
import ballerina.net.grpc;
import ballerina.io;

{{#stubs}}
struct {{connectorId}}{{stubTypeName}}Stub {
    grpc:Client clientEndpoint;
    grpc:ServiceStub serviceStub;
}
function <{{connectorId}}{{stubTypeName}}Stub stub> initStub(grpc:Client clientEndpoint) {
    grpc:ServiceStub navStub = {};
    navStub.initStub(clientEndpoint, "{{stubType}}", descriptorKey, descriptorMap);
    stub.serviceStub = navStub;
}
{{/stubs}}
{{#blockingFunctions}}
function <{{connectorId}}{{stubTypeName}}Stub stub> {{operationId}} ({{inputDataType}} req) ({{outputDataType}}, error) {
    var res, err1 = stub.serviceStub.blockingExecute("{{methodId}}", req);
    if (err1 != null && err1.message != null) {
        error e = {message:err1.message};
        return null, e;
    }
    var response, err2 = ({{outputDataType}})res;
    if (err2 != null && err2.message != null) {
        error e = {message:err2.message};
        return null, e;
    }
    return response, null;
}
{{/blockingFunctions}}
{{#nonBlockingFunctions}}
function <{{connectorId}}Stub stub> {{operationId}} ({{inputDataType}} req, typedesc listener) (error) {
    var err1 = stub.serviceStub.nonBlockingExecute("{{methodId}}", req, listener);
    if (err1 != null && err1.message != null) {
        error e = {message:err1.message};
        return e;
    }
    return null;
}
{{/nonBlockingFunctions}}
{{#streamingFunctions}}
function <{{connectorId}}Stub stub> {{operationId}} (typedesc listener) (grpc:Client, error)  {
    var res, err1 = stub.serviceStub.streamingExecute("{{methodId}}", listener);
    if (err1 != null && err1.message != null) {
        error e = {message:err1.message};
        return null, e;
    }
    var response, err2 = (grpc:Client)res;
    if (err2 != null && err2.message != null) {
        error e = {message:err2.message};
        return null,e;
    }
        return response,null;
}
{{/streamingFunctions}}
{{#client}}
{{#stubObjects}}
public struct {{connectorId}}{{stubTypeName}}Client {
    grpc:Client client;
    {{connectorId}}{{stubTypeName}}Stub stub;
}
public function <{{connectorId}}{{stubTypeName}}Client ep> init(grpc:ClientEndpointConfiguration config) {
    // initialize client endpoint.
    grpc:Client client = {};
    client.init(config);
    ep.client = client;
    // initialize service stub.
    {{connectorId}}{{stubTypeName}}Stub stub = {};
    stub.initStub(client);
    ep.stub = stub;
}
public function <{{connectorId}}{{stubTypeName}}Client ep> getClient() returns ({{connectorId}}{{stubTypeName}}Stub) {
    return ep.stub;
}
{{/stubObjects}}
{{/client}}
{{#struct}}
struct {{structId}} {
{{#attribute}}
{{typedesc}} {{name}};{{/attribute}}
}
{{/struct}}
const string descriptorKey = "{{rootDescriptorKey}}";
map descriptorMap =
{ {{#descriptors}}
  "{{descriptorKey}}":"{{descriptorData}}"{{eoe}}
{{/descriptors}} };

